package ru.dmitartur.library.marketplace.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.dmitartur.library.marketplace.entity.CompanyCredentials;
import ru.dmitartur.library.marketplace.repository.CompanyCredentialsRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Slf4j
@Service
@Transactional
@RequiredArgsConstructor
public class CompanyCredentialsService {
    
    private final CompanyCredentialsRepository repository;
    
    /**
     * –ù–∞–π—Ç–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É
     */
    public Optional<CompanyCredentials> findByCompanyIdAndMarketplace(UUID companyId, String marketplace) {
        log.debug("üîç Finding credentials for company: {}, marketplace: {}", companyId, marketplace);
        return repository.findByCompanyIdAndMarketplaceType(companyId, marketplace);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –≤—Å–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
     */
    public List<CompanyCredentials> findByCompanyId(UUID companyId) {
        log.debug("üîç Finding all credentials for company: {}", companyId);
        return repository.findByCompanyId(companyId);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
     */
    public List<CompanyCredentials> findByMarketplace(String marketplace) {
        log.debug("üîç Finding all active credentials for marketplace: {}", marketplace);
        return repository.findByMarketplaceTypeAndIsActiveTrue(marketplace);
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    public CompanyCredentials save(CompanyCredentials credentials) {
        log.info("üíæ Saving credentials for company: {}, marketplace: {}", 
                credentials.getCompanyId(), credentials.getMarketplaceName());
        return repository.save(credentials);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    public List<CompanyCredentials> findAllActive() {
        log.debug("üîç Finding all active credentials");
        return repository.findByIsActiveTrue();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    public List<CompanyCredentials> findAll() {
        log.debug("üîç Finding all credentials");
        return repository.findAll();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    public boolean existsByCompanyIdAndMarketplace(UUID companyId, String marketplace) {
        return repository.existsByCompanyIdAndMarketplaceType(companyId, marketplace);
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    public void deactivate(UUID companyId, String marketplace) {
        Optional<CompanyCredentials> credentials = findByCompanyIdAndMarketplace(companyId, marketplace);
        if (credentials.isPresent()) {
            CompanyCredentials cred = credentials.get();
            cred.setActive(false);
            save(cred);
            log.info("üîí Deactivated credentials for company: {}, marketplace: {}", companyId, marketplace);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
     */
    public CompanyCredentials updateTokens(UUID companyId, String marketplace, 
                                         String accessToken, String refreshToken, 
                                         LocalDateTime expiresAt) {
        Optional<CompanyCredentials> credentialsOpt = findByCompanyIdAndMarketplace(companyId, marketplace);
        if (credentialsOpt.isPresent()) {
            CompanyCredentials credentials = credentialsOpt.get();
            credentials.setAccessToken(accessToken);
            credentials.setRefreshToken(refreshToken);
            credentials.setTokenExpiresAt(expiresAt);
            
            CompanyCredentials saved = save(credentials);
            log.info("üîÑ Updated tokens for company: {}, marketplace: {}", companyId, marketplace);
            return saved;
        } else {
            throw new RuntimeException("Credentials not found for company: " + companyId + ", marketplace: " + marketplace);
        }
    }
    
    /**
     * –ù–∞–π—Ç–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
     */
    public List<CompanyCredentials> findCredentialsNeedingTokenRefresh() {
        LocalDateTime expiresAt = LocalDateTime.now().plusMinutes(5);
        return repository.findCredentialsNeedingTokenRefresh(expiresAt);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
     */
    public Optional<String> getValidAccessToken(UUID companyId, String marketplace) {
        Optional<CompanyCredentials> credentialsOpt = findByCompanyIdAndMarketplace(companyId, marketplace);
        if (credentialsOpt.isPresent()) {
            CompanyCredentials credentials = credentialsOpt.get();
            if (credentials.isTokenValid()) {
                return Optional.of(credentials.getAccessToken());
            } else {
                log.warn("‚ö†Ô∏è Token expired or invalid for company: {}, marketplace: {}", companyId, marketplace);
            }
        } else {
            log.warn("‚ö†Ô∏è No credentials found for company: {}, marketplace: {}", companyId, marketplace);
        }
        return Optional.empty();
    }
}