#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ Kafka
"""
import asyncio
import json
import sys
from aiokafka import AIOKafkaProducer, AIOKafkaConsumer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
sys.stdout.reconfigure(encoding='utf-8')
sys.stderr.reconfigure(encoding='utf-8')

async def test_utf8_producer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ Kafka"""
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    test_message = {
        "eventType": "ORDER_CREATED",
        "postingNumber": "TEST-UTF8-001",
        "source": "OZON",
        "eventTime": "2024-01-20T10:30:00Z",
        "totalPrice": "1250.50",
        "orderName": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏–Ω–∑—ã Acuvue Oasys 1-Day",
        "items": [
            {
                "id": 1,
                "product_id": 101,
                "offer_id": "ACU001",
                "name": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏–Ω–∑—ã Acuvue Oasys 1-Day",
                "quantity": 2,
                "price": "625.25",
                "sku": "ACU001-30"
            }
        ]
    }
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ Kafka")
    print("=" * 50)
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {json.dumps(test_message, ensure_ascii=False, indent=2)}")
    
    # –°–æ–∑–¥–∞–µ–º producer —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    producer = AIOKafkaProducer(
        bootstrap_servers="localhost:9092",
        value_serializer=lambda v: json.dumps(v, ensure_ascii=False, separators=(',', ':')).encode("utf-8"),
        key_serializer=lambda k: k.encode("utf-8") if k else None,
    )
    
    try:
        await producer.start()
        print("‚úÖ Producer –∑–∞–ø—É—â–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await producer.send_and_wait("order-events", test_message, key="TEST-UTF8-001")
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ order-events")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(2)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    finally:
        await producer.stop()
        print("üõë Producer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def test_utf8_consumer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏–∑ Kafka"""
    
    print("\nüì• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º consumer —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    consumer = AIOKafkaConsumer(
        "order-events",
        bootstrap_servers="localhost:9092",
        group_id="test-utf8-group",
        enable_auto_commit=True,
        value_deserializer=lambda v: json.loads(v.decode("utf-8")),
        key_deserializer=lambda k: k.decode("utf-8") if k else None,
        auto_offset_reset="latest"
    )
    
    try:
        await consumer.start()
        print("‚úÖ Consumer –∑–∞–ø—É—â–µ–Ω")
        
        # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        print("‚è≥ –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)...")
        
        async for msg in consumer:
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
            print(f"   Key: {msg.key}")
            print(f"   Value: {json.dumps(msg.value, ensure_ascii=False, indent=2)}")
            print(f"   –ö–æ–¥–∏—Ä–æ–≤–∫–∞ orderName: {repr(msg.value.get('orderName', ''))}")
            break  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏: {e}")
    finally:
        await consumer.stop()
        print("üõë Consumer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ Kafka")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º producer
    await test_utf8_producer()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º consumer
    await test_utf8_consumer()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main())

