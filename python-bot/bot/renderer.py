from __future__ import annotations

from pathlib import Path
import yaml
import re

_MESSAGES = yaml.safe_load((Path(__file__).parent / "templates" / "messages.yaml").read_text(encoding="utf-8"))


def render_from_body(body: dict) -> str:
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ template, –≤–µ—Ä–Ω—ë–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏–Ω–∞—á–µ str
    template_key = body.get("template") if isinstance(body, dict) else None
    if template_key and template_key in _MESSAGES:
        template = _MESSAGES[template_key]
        params = body.get("params", {})
        result = render_template(template, params)
        print(f"üîß Rendering template '{template_key}' with params {params} -> {result}")
        return result
    return str(body) if body else ""


def render_template(template: str, params: dict) -> str:
    """–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è"""
    result = template
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤–∏–¥–∞ {{param_name}}
    for param_name, param_value in params.items():
        placeholder = f"{{{{{param_name}}}}}"
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É —Å UTF-8
        str_value = str(param_value) if param_value is not None else ""
        result = result.replace(placeholder, str_value)
    
    return result



