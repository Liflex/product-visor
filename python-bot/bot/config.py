from __future__ import annotations
import os
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field, ValidationError


class Settings(BaseSettings):
    model_config = SettingsConfigDict(env_file=".env", env_file_encoding="utf-8", extra="ignore")

    telegram_bot_token: str = Field(default="", alias="BOT_TOKEN")
    kafka_bootstrap_servers: str = Field(default="localhost:9092", alias="KAFKA_BOOTSTRAP_SERVERS")
    kafka_topic_outgoing: str = Field(default="telegram.outgoing.messages", alias="KAFKA_TOPIC_OUTGOING")
    kafka_consumer_group: str = Field(default="python-bot", alias="KAFKA_CONSUMER_GROUP")
    kafka_topic_user_events: str = Field(default="user.events", alias="KAFKA_TOPIC_USER_EVENTS")
    kafka_topic_order_events: str = Field(default="order-events", alias="KAFKA_TOPIC_ORDER_EVENTS")
    metrics_port: int = Field(default=9101, alias="METRICS_PORT")

    def validate_bot_token(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π"""
        return bool(self.telegram_bot_token and self.telegram_bot_token != "your_telegram_bot_token_here")


try:
    settings = Settings()
except ValidationError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    exit(1)



