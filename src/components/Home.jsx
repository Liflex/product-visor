/**
 * Home Page Component
 * Provides welcome screen and overview of the Product Visor application
 */

import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useProducts } from '../hooks/use-products.js';
import { useCategories } from '../hooks/use-categories.js';
import useBarcodeScanner from '../hooks/use-barcode-scanner.js';
import Notification from './ui/notification.jsx';
import { findProductByBarcode, searchProductsPage } from '../services/productService.js';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è src –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
const getImageSrc = (product) => {
  const img = product?.image;
  if (!img && product?.imageUrl) return product.imageUrl;
  if (typeof img === 'string') {
    if (img.startsWith('data:')) return img;
    if (img.startsWith('/9j/')) return `data:image/jpeg;base64,${img}`;
  }
  if (Array.isArray(img)) {
    try {
      const base64 = btoa(String.fromCharCode(...new Uint8Array(img)));
      return `data:image/jpeg;base64,${base64}`;
    } catch (_) { return null; }
  }
  return null;
};

/**
 * Statistics card component
 */
const StatCard = ({ title, value, icon, description, linkTo, linkText }) => (
  <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
    <div className="flex items-center">
      <div className="text-3xl mr-4">{icon}</div>
      <div className="flex-1">
        <h3 className="text-lg font-semibold text-white">{title}</h3>
        <p className="text-3xl font-bold text-indigo-400">{value}</p>
        <p className="text-sm text-gray-400">{description}</p>
        {linkTo && linkText && (
          <Link 
            to={linkTo} 
            className="text-sm text-indigo-400 hover:text-indigo-300 transition-colors"
          >
            {linkText} ‚Üí
          </Link>
        )}
      </div>
    </div>
  </div>
);

/**
 * Feature card component
 */
const FeatureCard = ({ title, description, icon }) => (
  <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
    <div className="text-center">
      <div className="text-4xl mb-4">{icon}</div>
      <h3 className="text-lg font-semibold text-white mb-2">{title}</h3>
      <p className="text-gray-400">{description}</p>
    </div>
  </div>
);

/**
 * Main Home component
 */
const Home = () => {
  const { totalProducts, filteredCount } = useProducts();
  const { totalCategories } = useCategories();
  const navigate = useNavigate();
  
  // Global barcode scanner
  const { notification, hideNotification } = useBarcodeScanner({
    enabled: true
  });

  // Manual barcode search state
  const [barcodeSearch, setBarcodeSearch] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [searchError, setSearchError] = useState('');

  // Full-text search state
  const [fullQuery, setFullQuery] = useState('');
  const [fullPage, setFullPage] = useState(0);
  const [fullSize, setFullSize] = useState(10);
  const [fullResults, setFullResults] = useState([]);
  const [fullTotalPages, setFullTotalPages] = useState(0);
  const [fullTotalElements, setFullTotalElements] = useState(0);
  const [fullLoading, setFullLoading] = useState(false);
  const [fullError, setFullError] = useState('');

  // Handle manual barcode search
  const handleBarcodeSearch = async (e) => {
    e.preventDefault();
    
    if (!barcodeSearch.trim()) {
      setSearchError('–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞');
      return;
    }

    setIsSearching(true);
    setSearchError('');

    try {
      const product = await findProductByBarcode(barcodeSearch.trim());
      
      if (product) {
        navigate(`/product/${product.id}`);
      } else {
        navigate('/add-product', { 
          state: { barcode: barcodeSearch.trim() } 
        });
      }
    } catch (error) {
      console.error('Error searching product by barcode:', error);
      setSearchError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞');
    } finally {
      setIsSearching(false);
    }
  };

  // Handle full-text search submit
  const handleFullSearch = async (e) => {
    e.preventDefault();
    if (!fullQuery.trim()) {
      setFullError('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞');
      return;
    }
    try {
      setFullLoading(true);
      setFullError('');
      const pageData = await searchProductsPage(fullQuery.trim(), fullPage, fullSize);
      setFullResults(pageData.content || []);
      setFullTotalPages(pageData.totalPages || 0);
      setFullTotalElements(pageData.totalElements || 0);
    } catch (err) {
      console.error('Error full-text searching:', err);
      setFullError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ');
    } finally {
      setFullLoading(false);
    }
  };

  const FullSearchPagination = () => (
    <div className="flex items-center justify-between mt-4">
      <div className="text-gray-400 text-sm">
        –ù–∞–π–¥–µ–Ω–æ: {fullTotalElements} ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü: {fullTotalPages}
      </div>
      <div className="flex items-center space-x-2">
        <button
          className="px-3 py-1 bg-gray-700 text-white rounded disabled:opacity-50"
          onClick={async () => { if (fullPage>0){const p=fullPage-1; setFullPage(p); await searchProductsPage(fullQuery, p, fullSize).then(d=>{setFullResults(d.content||[]);setFullTotalPages(d.totalPages||0);setFullTotalElements(d.totalElements||0);});}}}
          disabled={fullPage <= 0}
        >
          ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
        </button>
        <span className="text-gray-300 text-sm">–°—Ç—Ä. {fullPage + 1} –∏–∑ {Math.max(fullTotalPages, 1)}</span>
        <button
          className="px-3 py-1 bg-gray-700 text-white rounded disabled:opacity-50"
          onClick={async () => { if (fullPage < fullTotalPages-1){const p=fullPage+1; setFullPage(p); await searchProductsPage(fullQuery, p, fullSize).then(d=>{setFullResults(d.content||[]);setFullTotalPages(d.totalPages||0);setFullTotalElements(d.totalElements||0);});}}}
          disabled={fullPage >= fullTotalPages - 1}
        >
          –°–ª–µ–¥—É—é—â–∞—è ‚Üí
        </button>
        <select
          className="ml-2 bg-gray-700 text-white rounded px-2 py-1"
          value={fullSize}
          onChange={async (e) => { const s=parseInt(e.target.value,10); setFullSize(s); const p=0; setFullPage(p); const d=await searchProductsPage(fullQuery, p, s); setFullResults(d.content||[]); setFullTotalPages(d.totalPages||0); setFullTotalElements(d.totalElements||0); }}
        >
          {[10,20,50].map(s => (
            <option key={s} value={s}>{s} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ</option>
          ))}
        </select>
      </div>
    </div>
  );

  const features = [
    {
      title: '–£–º–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å',
      description: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏–Ω–∑ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏: —Å–∏–ª–∞, —Ü–≤–µ—Ç –∏ —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏.',
      icon: 'üì¶'
    },
    {
      title: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫',
      description: '–ë—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –º–æ—â–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.',
      icon: 'üîç'
    },
    {
      title: '–ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
      description: '–î–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ —É–¥–∞–ª—è–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.',
      icon: '‚ö°'
    },
    {
      title: '–í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä',
      description: '–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.',
      icon: 'üñºÔ∏è'
    }
  ];

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="space-y-8">
        {/* Hero Section */}
        <div className="text-center py-12">
        <h1 className="text-4xl font-bold text-white mb-4">
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Product Visor
        </h1>
        <p className="text-xl text-gray-400 mb-8 max-w-2xl mx-auto">
          –í–∞—à–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –ª–∏–Ω–∑. 
          –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ, –∏—â–∏—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é.
        </p>

        {/* Barcode Search Form */}
        <div className="max-w-md mx-auto mb-8">
          <form onSubmit={handleBarcodeSearch} className="space-y-4">
            <div className="relative">
              <input
                type="text"
                value={barcodeSearch}
                onChange={(e) => setBarcodeSearch(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö-–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞..."
                className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                disabled={isSearching}
              />
              <button
                type="submit"
                disabled={isSearching}
                className="absolute right-2 top-1/2 transform -translate-y-1/2 px-4 py-1 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-gray-600 disabled:cursor-not-allowed transition-colors"
              >
                {isSearching ? '–ü–æ–∏—Å–∫...' : 'üîç'}
              </button>
            </div>
            {searchError && (
              <p className="text-red-400 text-sm">{searchError}</p>
            )}
          </form>
          <p className="text-sm text-gray-500 mt-2">
            –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–∞–Ω–µ—Ä —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ (–Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É)
          </p>
        </div>

        {/* Full-text Search */}
        <div className="max-w-3xl mx-auto">
          <form onSubmit={handleFullSearch} className="flex items-center space-x-2">
            <input
              type="text"
              value={fullQuery}
              onChange={(e) => setFullQuery(e.target.value)}
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º..."
              className="flex-1 px-4 py-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
            />
            <button
              type="submit"
              className="px-4 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700"
            >
              –ù–∞–π—Ç–∏
            </button>
          </form>

          {/* Results */}
          {fullLoading && (
            <div className="flex justify-center items-center h-24">
              <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-indigo-500"></div>
            </div>
          )}

          {fullError && (
            <p className="text-red-400 mt-3">{fullError}</p>
          )}

          {!fullLoading && fullResults.length > 0 && (
            <div className="mt-4 bg-gray-800 rounded-lg p-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {fullResults.map(p => (
                  <div key={p.id} className="bg-gray-700 rounded p-3 cursor-pointer" onDoubleClick={() => navigate(`/product/${p.id}`, { state: { product: p } })}>
                    {/* –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
                    {getImageSrc(p) && (
                      <img
                        src={getImageSrc(p)}
                        alt={p.name}
                        className="w-full h-32 object-cover rounded mb-2"
                        onError={(e) => { e.target.style.display = 'none'; }}
                      />
                    )}
                    <div className="text-white font-semibold truncate">{p.name}</div>
                    <div className="text-gray-300 text-sm">{p.category?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</div>
                    <div className="text-gray-400 text-xs mt-1">–ê—Ä—Ç–∏–∫—É–ª: {p.article} ‚Ä¢ –®–ö: {p.barcode || '‚Äî'}</div>
                  </div>
                ))}
              </div>
              <FullSearchPagination />
            </div>
          )}
        </div>

        <div className="flex justify-center space-x-4 mt-8">
          <Link
            to="/add-product"
            className="bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-3 rounded-md transition-colors font-medium"
          >
            –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
          </Link>
          <Link
            to="/all-products"
            className="border border-gray-600 text-gray-300 hover:bg-gray-700 px-6 py-3 rounded-md transition-colors font-medium"
          >
            –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥
          </Link>
        </div>
      </div>
      </div>
      
      {/* Global Notifications */}
      {notification && (
        <Notification
          type={notification.type}
          message={notification.message}
          duration={notification.duration}
          onClose={hideNotification}
        />
      )}
    </div>
  );
};

export default Home;