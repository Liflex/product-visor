package ru.dmitartur.listener;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import ru.dmitartur.event.ProductStockQuantityChangeEvent;
import ru.dmitartur.interceptor.ProductHistoryInterceptor;

/**
 * –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ ProductStock
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class ProductStockQuantityChangeListener {

    private final ProductHistoryInterceptor productHistoryInterceptor;

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     */
    @Async
    @EventListener
    public void handleProductStockQuantityChange(ProductStockQuantityChangeEvent event) {
        try {
            log.info("üìù Processing ProductStock quantity change event: productStockId={}, productArticle={}, oldQuantity={}, newQuantity={}",
                    event.getProductStock().getId(), event.getProductStock().getProduct().getArticle(), event.getOldQuantity(),
                    event.getNewQuantity());

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            String sourceSystem = event.getSourceSystem() != null ? event.getSourceSystem() : "STOCK_SERVICE";
            String sourceId = event.getSourceId() != null ? event.getSourceId() : event.getProductStock().getId().toString();
            String changeReason = "STOCK_UPDATE"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∏–∑ ProductStockService

            // –í—ã–∑—ã–≤–∞–µ–º interceptor —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è, –≤–∫–ª—é—á–∞—è —Å–∫–ª–∞–¥—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            productHistoryInterceptor.trackProductStockQuantityChange(
                    event.getProductStock(),
                    event.getOldQuantity(),
                    event.getNewQuantity(),
                    changeReason,
                    sourceSystem,
                    sourceId);

            log.info("‚úÖ Successfully processed ProductStock quantity change event: productStockId={}",
                    event.getProductStock().getId());

        } catch (Exception e) {
            log.error("‚ùå Error processing ProductStock quantity change event: productStockId={}, error={}",
                    event.getProductStock().getId(), e.getMessage(), e);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É-–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
     */
    private String determineSourceSystem(String changeReason) {
        if (changeReason != null) {
            if (changeReason.contains("ORDER_")) {
                return "KAFKA";
            } else if (changeReason.equals("CREATED") || changeReason.equals("UPDATED")) {
                return "REST_API";
            } else if (changeReason.equals("STOCK_UPDATE")) {
                return "STOCK_SERVICE";
            }
        }
        return "UNKNOWN";
    }
}
