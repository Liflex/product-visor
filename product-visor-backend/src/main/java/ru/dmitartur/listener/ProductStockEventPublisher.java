package ru.dmitartur.listener;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;
import ru.dmitartur.entity.ProductStock;
import ru.dmitartur.event.ProductStockQuantityChangeEvent;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å ProductStock
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ProductStockEventPublisher {
    
    private final ApplicationEventPublisher eventPublisher;
    
    /**
     * –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     */
    public void publishQuantityChangeEvent(ProductStock productStock, Integer oldQuantity, 
                                         Integer newQuantity) {
        try {
            ProductStockQuantityChangeEvent event = new ProductStockQuantityChangeEvent(
                this, productStock, oldQuantity, newQuantity);
            
            eventPublisher.publishEvent(event);
            
            log.debug("üì¢ Published ProductStock quantity change event: productStockId={}, oldQuantity={}, newQuantity={}",
                    productStock.getId(), oldQuantity, newQuantity);
        } catch (Exception e) {
            log.error("‚ùå Error publishing ProductStock quantity change event: productStockId={}, error={}", 
                    productStock.getId(), e.getMessage(), e);
        }
    }
    
    /**
     * –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
     */
    public void publishQuantityChangeEventWithContext(ProductStock productStock, Integer oldQuantity, 
                                                    Integer newQuantity, String sourceSystem, String sourceId) {
        try {
            ProductStockQuantityChangeEvent event = new ProductStockQuantityChangeEvent(
                this, productStock, oldQuantity, newQuantity, sourceSystem, sourceId);
            
            eventPublisher.publishEvent(event);
            
            log.debug("üì¢ Published ProductStock quantity change event with context: productStockId={}, oldQuantity={}, newQuantity={}, sourceSystem={}, sourceId={}",
                    productStock.getId(), oldQuantity, newQuantity, sourceSystem, sourceId);
        } catch (Exception e) {
            log.error("‚ùå Error publishing ProductStock quantity change event with context: productStockId={}, error={}", 
                    productStock.getId(), e.getMessage(), e);
        }
    }
}
