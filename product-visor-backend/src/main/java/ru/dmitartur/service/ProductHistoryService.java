package ru.dmitartur.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.dmitartur.dto.ProductHistoryDto;
import ru.dmitartur.entity.ProductHistory;
import ru.dmitartur.mapper.ProductHistoryMapper;
import ru.dmitartur.repository.ProductHistoryRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞
 */
@Slf4j
@Service
@RequiredArgsConstructor
@Transactional
public class ProductHistoryService {
    
    private final ProductHistoryRepository repository;
    private final ProductHistoryMapper mapper;
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
     */
    public ProductHistory saveHistory(Long productId, String fieldName, String oldValue, String newValue,
                                    String changeReason, String sourceSystem, String sourceId) {
        try {
            ProductHistory history = new ProductHistory(productId, fieldName, oldValue, newValue,
                    changeReason, sourceSystem, sourceId);
            
            ProductHistory saved = repository.save(history);
            log.info("üìù Saved product history: productId={}, field={}, reason={}, source={}", 
                    productId, fieldName, changeReason, sourceSystem);
            
            return saved;
        } catch (Exception e) {
            log.error("‚ùå Error saving product history: productId={}, field={}, error={}", 
                    productId, fieldName, e.getMessage());
            throw e;
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     */
    public ProductHistory saveHistoryWithMetadata(Long productId, String fieldName, String oldValue, String newValue,
                                                String changeReason, String sourceSystem, String sourceId, String metadata) {
        try {
            ProductHistory history = new ProductHistory(productId, fieldName, oldValue, newValue,
                    changeReason, sourceSystem, sourceId);
            history.setMetadata(metadata);
            
            ProductHistory saved = repository.save(history);
            log.info("üìù Saved product history with metadata: productId={}, field={}, reason={}, source={}", 
                    productId, fieldName, changeReason, sourceSystem);
            
            return saved;
        } catch (Exception e) {
            log.error("‚ùå Error saving product history with metadata: productId={}, field={}, error={}", 
                    productId, fieldName, e.getMessage());
            throw e;
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    public ProductHistory saveHistoryWithUserInfo(Long productId, String fieldName, String oldValue, String newValue,
                                                String changeReason, String sourceSystem, String sourceId, String metadata,
                                                UUID userId, UUID companyId) {
        try {
            ProductHistory history = new ProductHistory(productId, fieldName, oldValue, newValue,
                    changeReason, sourceSystem, sourceId, userId, companyId);
            history.setMetadata(metadata);
            
            ProductHistory saved = repository.save(history);
            log.info("üìù Saved product history with user info: productId={}, field={}, reason={}, source={}, userId={}, companyId={}", 
                    productId, fieldName, changeReason, sourceSystem, userId, companyId);
            
            return saved;
        } catch (Exception e) {
            log.error("‚ùå Error saving product history with user info: productId={}, field={}, error={}", 
                    productId, fieldName, e.getMessage());
            throw e;
        }
    }
    
    /**
     * –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ ID –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    public Page<ProductHistoryDto> findByProductId(Long productId, Pageable pageable) {
        log.debug("üîç Finding product history by productId: {}", productId);
        Page<ProductHistory> page = repository.findByProductIdOrderByCreatedAtDesc(productId, pageable);
        return page.map(mapper::toDto);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø–æ–ª—é
     */
    public List<ProductHistoryDto> findByProductIdAndField(Long productId, String fieldName) {
        log.debug("üîç Finding product history by productId: {} and field: {}", productId, fieldName);
        List<ProductHistory> history = repository.findByProductIdAndFieldNameOrderByCreatedAtDesc(productId, fieldName);
        return history.stream().map(mapper::toDto).toList();
    }
    
    /**
     * –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –ø—Ä–∏—á–∏–Ω–µ
     */
    public Page<ProductHistoryDto> findByChangeReason(String changeReason, Pageable pageable) {
        log.debug("üîç Finding product history by change reason: {}", changeReason);
        Page<ProductHistory> page = repository.findByChangeReasonOrderByCreatedAtDesc(changeReason, pageable);
        return page.map(mapper::toDto);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Å–∏—Å—Ç–µ–º–µ-–∏—Å—Ç–æ—á–Ω–∏–∫—É
     */
    public Page<ProductHistoryDto> findBySourceSystem(String sourceSystem, Pageable pageable) {
        log.debug("üîç Finding product history by source system: {}", sourceSystem);
        Page<ProductHistory> page = repository.findBySourceSystemOrderByCreatedAtDesc(sourceSystem, pageable);
        return page.map(mapper::toDto);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    public List<ProductHistoryDto> findBySourceId(String sourceId) {
        log.debug("üîç Finding product history by source ID: {}", sourceId);
        List<ProductHistory> history = repository.findBySourceIdOrderByCreatedAtDesc(sourceId);
        return history.stream().map(mapper::toDto).toList();
    }
    
    /**
     * –ù–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    public Page<ProductHistoryDto> findByDateRange(LocalDateTime fromDate, LocalDateTime toDate, Pageable pageable) {
        log.debug("üîç Finding product history by date range: {} to {}", fromDate, toDate);
        Page<ProductHistory> page = repository.findByDateRange(fromDate, toDate, pageable);
        return page.map(mapper::toDto);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø–æ–ª—è
     */
    public Optional<ProductHistoryDto> findLastChangeByProductAndField(Long productId, String fieldName) {
        log.debug("üîç Finding last change for product: {} and field: {}", productId, fieldName);
        ProductHistory history = repository.findLastChangeByProductAndField(productId, fieldName);
        return Optional.ofNullable(history).map(mapper::toDto);
    }
    
    /**
     * –ù–∞–π—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ –∏ –ø–µ—Ä–∏–æ–¥—É
     */
    public List<ProductHistoryDto> findByChangeReasonAndDateRange(String changeReason, LocalDateTime fromDate, LocalDateTime toDate) {
        log.debug("üîç Finding product history by reason: {} and date range: {} to {}", changeReason, fromDate, toDate);
        List<ProductHistory> history = repository.findByChangeReasonAndDateRange(changeReason, fromDate, toDate);
        return history.stream().map(mapper::toDto).toList();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
     */
    public ProductHistoryStats getProductHistoryStats(Long productId) {
        log.debug("üìä Getting product history stats for productId: {}", productId);
        
        List<ProductHistory> quantityChanges = repository.findByProductIdAndFieldNameOrderByCreatedAtDesc(productId, "quantity");
        
        int totalQuantityChanges = quantityChanges.size();
        int orderCreatedChanges = (int) quantityChanges.stream()
                .filter(h -> "ORDER_CREATED".equals(h.getChangeReason()))
                .count();
        int orderCancelledChanges = (int) quantityChanges.stream()
                .filter(h -> "ORDER_CANCELLED".equals(h.getChangeReason()))
                .count();
        
        return new ProductHistoryStats(productId, totalQuantityChanges, orderCreatedChanges, orderCancelledChanges);
    }
    
    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    public static class ProductHistoryStats {
        private final Long productId;
        private final int totalQuantityChanges;
        private final int orderCreatedChanges;
        private final int orderCancelledChanges;
        
        public ProductHistoryStats(Long productId, int totalQuantityChanges, int orderCreatedChanges, int orderCancelledChanges) {
            this.productId = productId;
            this.totalQuantityChanges = totalQuantityChanges;
            this.orderCreatedChanges = orderCreatedChanges;
            this.orderCancelledChanges = orderCancelledChanges;
        }
        
        // Getters
        public Long getProductId() { return productId; }
        public int getTotalQuantityChanges() { return totalQuantityChanges; }
        public int getOrderCreatedChanges() { return orderCreatedChanges; }
        public int getOrderCancelledChanges() { return orderCancelledChanges; }
    }
}
