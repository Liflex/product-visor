package ru.dmitartur.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import ru.dmitartur.common.enums.ProductStockType;
import ru.dmitartur.entity.Product;
import ru.dmitartur.entity.ProductStock;
import ru.dmitartur.repository.ProductStockRepository;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class BulkStockSyncService {

    private final ProductStockRepository productStockRepository;
    private final StockSyncService stockSyncService;

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    public void syncStocksForProducts(List<Long> productIds, ProductStockType stockType, UUID userId) {
        log.info("üöÄ Starting bulk stock sync: productIds={}, stockType={}, userId={}", productIds, stockType, userId);

        // 1) –ë–µ—Ä–µ–º —Å—Ä–∞–∑—É ProductStock –ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ç–∏–ø—É
        List<ProductStock> stocks = productStockRepository.findByProductIdInAndStockTypeAndUserId(
                productIds, stockType, userId);

        if (stocks.isEmpty()) {
            log.warn("‚ùå No ProductStock found for given products and type: productIds={}, stockType={}", productIds, stockType);
            throw new RuntimeException("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ —Ç–∏–ø—É");
        }

        stockSyncService.syncStocksToMarketplace(stocks);

        // 3) –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Set —Å–∫–ª–∞–¥–æ–≤ –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
        int syncedProducts = 0;
        for (ProductStock stock : stocks) {
            Product product = stock.getProduct();

            if (stock.getWarehouses().isEmpty()) {
                log.warn("‚ö†Ô∏è Product {} has no warehouses in stocks", product.getId());
            }

            String marketplace = getMarketplaceFromStockType(stockType);
            log.info("‚û°Ô∏è Syncing product id={}, article={}, companyId={} to marketplace={} for warehouses={}",
                    product.getId(), product.getArticle(), product.getCompanyId(), marketplace, stock.getWarehouseIds());

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º stock –∑–∞–ø–∏—Å—è–º –ø—Ä–æ–¥—É–∫—Ç–∞
            stock.setLastSyncAt(LocalDateTime.now());
            stock.setSyncStatus("SYNCING");
            productStockRepository.save(stock);

            syncedProducts++;
        }

        log.info("‚úÖ Bulk sync completed: requested={}, withStocks={}, type={}", productIds.size(), syncedProducts, stockType);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    public Map<String, Object> getSyncStats(List<Long> productIds, ProductStockType stockType, UUID userId) {
        Map<String, Object> stats = new HashMap<>();

        // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        List<ProductStock> stocks = productStockRepository.findByProductIdInAndStockTypeAndUserId(
                productIds, stockType, userId);

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        long totalProducts = productIds != null ? productIds.size() : 0;
        long productsWithStocks = stocks.stream()
                .map(stock -> stock.getProduct().getId())
                .distinct()
                .count();

        long totalQuantity = stocks.stream()
                .mapToInt(ProductStock::getQuantity)
                .sum();

        long syncingCount = stocks.stream()
                .filter(stock -> "SYNCING".equals(stock.getSyncStatus()))
                .count();

        long syncedCount = stocks.stream()
                .filter(stock -> "SYNCED".equals(stock.getSyncStatus()))
                .count();

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤
        long totalWarehouses = stocks.stream()
                .flatMap(stock -> stock.getWarehouseIds().stream())
                .distinct()
                .count();

        stats.put("totalProducts", totalProducts);
        stats.put("productsWithStocks", productsWithStocks);
        stats.put("totalStocks", stocks.size());
        stats.put("totalQuantity", totalQuantity);
        stats.put("totalWarehouses", totalWarehouses);
        stats.put("syncingCount", syncingCount);
        stats.put("syncedCount", syncedCount);
        stats.put("stockType", stockType);

        return stats;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –∏–∑ —Ç–∏–ø–∞ –æ—Å—Ç–∞—Ç–∫–∞
     */
    private String getMarketplaceFromStockType(ProductStockType stockType) {
        return switch (stockType) {
            case YANDEX_FBO -> "YANDEX";
            case OZON_FBO -> "OZON";
            default -> "ALL"; // –î–ª—è FBS –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
        };
    }
}
