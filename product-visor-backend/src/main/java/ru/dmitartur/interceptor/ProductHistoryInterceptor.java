package ru.dmitartur.interceptor;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import ru.dmitartur.entity.Product;
import ru.dmitartur.entity.ProductStock;
import ru.dmitartur.entity.Warehouse;
import ru.dmitartur.service.ProductHistoryService;
import ru.dmitartur.kafka.StockEventProducer;
import ru.dmitartur.context.ChangeContextHolder;
import ru.dmitartur.common.utils.JwtUtil;
import ru.dmitartur.util.ChangeReasonUtil;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

/**
 * Interceptor –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π Product
 * –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ AOP
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class ProductHistoryInterceptor {
    
    private final ProductHistoryService productHistoryService;
    private final StockEventProducer stockEventProducer;

    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ ProductStock (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è ManyToMany)
     */
    public void trackProductStockQuantityChange(ProductStock stock, Integer oldQuantity, Integer newQuantity,
                                               String changeReason, String sourceSystem, String sourceId) {
        try {
            Product product = stock.getProduct();
            Set<Warehouse> warehouses = stock.getWarehouses();
            
            log.info("üîÑ Starting ProductStock quantity change tracking: stockId={}, productId={}, productArticle={}, oldQty={}, newQty={}, changeReason={}, sourceSystem={}", 
                    stock.getId(), product.getId(), product.getArticle(), oldQuantity, newQuantity, changeReason, sourceSystem);
            
            if (warehouses == null || warehouses.isEmpty()) {
                log.warn("‚ö†Ô∏è ProductStock {} has no warehouses, skipping history tracking", stock.getId());
                return;
            }

            log.debug("üì¶ Processing {} warehouses for stock change: stockId={}, warehouses={}", 
                    warehouses.size(), stock.getId(), 
                    warehouses.stream().map(w -> w.getId() + "(" + w.getName() + ")").collect(Collectors.joining(", ")));

            // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
            String warehouseMetadata = warehouses.stream()
                    .map(warehouse -> String.format(
                            "{\"warehouseId\":\"%s\",\"externalWarehouseId\":\"%s\",\"warehouseType\":\"%s\",\"marketplace\":\"%s\"}",
                            warehouse.getId() != null ? warehouse.getId().toString() : "",
                            warehouse.getExternalWarehouseId() != null ? warehouse.getExternalWarehouseId() : "",
                            warehouse.getWarehouseType() != null ? warehouse.getWarehouseType().name() : "",
                            warehouse.getMarketplace() != null ? warehouse.getMarketplace().name() : ""
                    ))
                    .collect(Collectors.joining(","));
            
            String metadata = String.format("{\"warehouses\":[%s],\"stockType\":\"%s\"}", 
                    warehouseMetadata, stock.getStockType().name());

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º—É-–∏—Å—Ç–æ—á–Ω–∏–∫
            String finalChangeReason = ChangeReasonUtil.determineChangeReason(sourceSystem, sourceId);
            String finalSourceSystem = ChangeReasonUtil.determineSourceSystem(finalChangeReason, sourceId);
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–æ–º–ø–∞–Ω–∏–∏
            UUID userId = null;
            UUID companyId = null;
            
            try {
                userId = JwtUtil.getRequiredOwnerId();
                var companyIdOpt = JwtUtil.resolveEffectiveCompanyId();
                if (companyIdOpt.isPresent()) {
                    companyId = UUID.fromString(companyIdOpt.get());
                }
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è Could not get user/company info for history tracking: {}", e.getMessage());
            }

            log.debug("üíæ Saving history with metadata: productId={}, metadata={}, changeReason={}, sourceSystem={}, userId={}, companyId={}", 
                    product.getId(), metadata, finalChangeReason, finalSourceSystem, userId, companyId);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if (userId != null) {
                productHistoryService.saveHistoryWithUserInfo(
                        product.getId(),
                        "product_stock.quantity",
                        String.valueOf(oldQuantity),
                        String.valueOf(newQuantity),
                        finalChangeReason,
                        finalSourceSystem,
                        sourceId,
                        metadata,
                        userId,
                        companyId
                );
            } else {
                // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                productHistoryService.saveHistoryWithMetadata(
                        product.getId(),
                        "product_stock.quantity",
                        String.valueOf(oldQuantity),
                        String.valueOf(newQuantity),
                        finalChangeReason,
                        finalSourceSystem,
                        sourceId,
                        metadata
                );
            }

            log.info("‚úÖ History saved successfully for productId={}, stockId={}", product.getId(), stock.getId());

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫–ª–∞–¥–∞
            ChangeContextHolder.ChangeContext ctx = ChangeContextHolder.get();
            String originMarket = (ctx != null) ? ctx.originMarket : null;
            
            log.debug("üì§ Sending Kafka events for {} warehouses: stockId={}, originMarket={}", 
                    warehouses.size(), stock.getId(), originMarket);
            
            for (Warehouse warehouse : warehouses) {
                log.debug("üì§ Sending stock change event for warehouse: productId={}, warehouseId={}, warehouseName={}, marketplace={}, oldQty={}, newQty={}", 
                        product.getId(), warehouse.getId(), warehouse.getName(), 
                        warehouse.getMarketplace() != null ? warehouse.getMarketplace().name() : "UNKNOWN",
                        oldQuantity, newQuantity);
                
                stockEventProducer.sendStockChangedForWarehouse(
                        product.getId(),
                        product.getArticle(),
                        warehouse.getId() != null ? warehouse.getId().toString() : null,
                        warehouse.getExternalWarehouseId(),
                        warehouse.getWarehouseType() != null ? warehouse.getWarehouseType().name() : null,
                        oldQuantity,
                        newQuantity,
                        finalChangeReason,
                        finalSourceSystem,
                        sourceId,
                        originMarket,
                        warehouse.getCompanyId().toString()
                );
                
                log.debug("‚úÖ Stock change event sent for warehouse: productId={}, warehouseId={}, oldQty={}, newQty={}", 
                        product.getId(), warehouse.getId(), oldQuantity, newQuantity);
            }
            
            log.info("‚úÖ ProductStock quantity change tracking completed: productId={}, stockId={}, warehouses={}, oldQty={}, newQty={}, eventsSent={}", 
                    product.getId(), stock.getId(), warehouses.size(), oldQuantity, newQuantity, warehouses.size());
                    
        } catch (Exception e) {
            log.error("‚ùå Error tracking product stock quantity change: stockId={}, productId={}, oldQty={}, newQty={}, error={}", 
                    stock.getId(), stock.getProduct() != null ? stock.getProduct().getId() : "UNKNOWN", 
                    oldQuantity, newQuantity, e.getMessage(), e);
        }
    }
}
