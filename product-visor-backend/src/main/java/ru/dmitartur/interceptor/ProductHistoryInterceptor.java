package ru.dmitartur.interceptor;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import ru.dmitartur.entity.Product;
import ru.dmitartur.service.ProductHistoryService;

/**
 * Interceptor –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π Product
 * –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ AOP
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class ProductHistoryInterceptor {
    
    private final ProductHistoryService productHistoryService;
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
     */
    public void trackQuantityChange(Product product, int oldQuantity, int newQuantity, 
                                   String changeReason, String sourceSystem, String sourceId) {
        try {
            productHistoryService.saveHistory(
                product.getId(),
                "quantity",
                String.valueOf(oldQuantity),
                String.valueOf(newQuantity),
                changeReason,
                sourceSystem,
                sourceId
            );
            
            log.debug("üìù Tracked quantity change: productId={}, oldQuantity={}, newQuantity={}, reason={}, source={}", 
                    product.getId(), oldQuantity, newQuantity, changeReason, sourceSystem);
                    
        } catch (Exception e) {
            log.error("‚ùå Error tracking quantity change: productId={}, error={}", 
                    product.getId(), e.getMessage());
        }
    }
    
    /**
     * –û—Ç—Å–ª–µ–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    public void trackQuantityChange(Product product, int oldQuantity, int newQuantity) {
        String changeReason = determineChangeReason();
        String sourceSystem = determineSourceSystem();
        String sourceId = determineSourceId();
        
        trackQuantityChange(product, oldQuantity, newQuantity, changeReason, sourceSystem, sourceId);
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private String determineChangeReason() {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        
        for (StackTraceElement element : stackTrace) {
            String className = element.getClassName();
            String methodName = element.getMethodName();
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            if (className.contains("OrderEventConsumer")) {
                if (methodName.contains("handleOrderCreated")) {
                    return "ORDER_CREATED";
                } else if (methodName.contains("handleOrderCancelled")) {
                    return "ORDER_CANCELLED";
                }
            } else if (className.contains("ProductController")) {
                return "MANUAL_UPDATE";
            }
        }
        
        return "UNKNOWN";
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º—É-–∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private String determineSourceSystem() {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        
        for (StackTraceElement element : stackTrace) {
            String className = element.getClassName();
            
            if (className.contains("OrderEventConsumer")) {
                return "KAFKA";
            } else if (className.contains("ProductController")) {
                return "REST_API";
            }
        }
        
        return "UNKNOWN";
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private String determineSourceId() {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        
        for (StackTraceElement element : stackTrace) {
            String className = element.getClassName();
            
            if (className.contains("OrderEventConsumer")) {
                return "kafka_event";
            } else if (className.contains("ProductController")) {
                return "rest_api";
            }
        }
        
        return "unknown";
    }
}
