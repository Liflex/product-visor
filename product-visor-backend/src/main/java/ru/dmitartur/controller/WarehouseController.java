package ru.dmitartur.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.dmitartur.entity.Warehouse;
import ru.dmitartur.dto.WarehouseDto;
import ru.dmitartur.mapper.WarehouseMapper;
import ru.dmitartur.service.WarehouseService;

import java.util.List;
import java.util.UUID;

@Slf4j
@RestController
@RequestMapping("/api/v1/warehouses")
@RequiredArgsConstructor
public class WarehouseController {
    
    private final WarehouseService warehouseService;
    private final WarehouseMapper warehouseMapper;
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–∫–ª–∞–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/company/{companyId}")
    public ResponseEntity<List<WarehouseDto>> getCompanyWarehouses(@PathVariable UUID companyId) {
        log.info("üì¶ Getting warehouses for company: {}", companyId);
        List<Warehouse> warehouses = warehouseService.getCompanyWarehouses(companyId);
        return ResponseEntity.ok(warehouses.stream().map(warehouseMapper::toDto).toList());
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–π —Å–∫–ª–∞–¥ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/company/{companyId}/home")
    public ResponseEntity<WarehouseDto> getHomeWarehouse(@PathVariable UUID companyId) {
        log.info("üè† Getting home warehouse for company: {}", companyId);
        Warehouse warehouse = warehouseService.getHomeWarehouse(companyId);
        return ResponseEntity.ok(warehouseMapper.toDto(warehouse));
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å FBS —Å–∫–ª–∞–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/company/{companyId}/fbs")
    public ResponseEntity<List<WarehouseDto>> getFbsWarehouses(@PathVariable UUID companyId) {
        log.info("üì¶ Getting FBS warehouses for company: {}", companyId);
        List<Warehouse> warehouses = warehouseService.getFbsWarehouses(companyId);
        return ResponseEntity.ok(warehouses.stream().map(warehouseMapper::toDto).toList());
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å FBO —Å–∫–ª–∞–¥—ã –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/company/{companyId}/fbo")
    public ResponseEntity<List<WarehouseDto>> getFboWarehouses(@PathVariable UUID companyId) {
        log.info("üì¶ Getting FBO warehouses for company: {}", companyId);
        List<Warehouse> warehouses = warehouseService.getFboWarehouses(companyId);
        return ResponseEntity.ok(warehouses.stream().map(warehouseMapper::toDto).toList());
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫–ª–∞–¥
     */
    @PostMapping
    public ResponseEntity<WarehouseDto> createWarehouse(@RequestBody WarehouseDto warehouseDto) {
        log.info("‚ûï Creating warehouse: {}", warehouseDto.getName());
        Warehouse created = warehouseService.createWarehouse(warehouseMapper.toEntity(warehouseDto));
        return ResponseEntity.ok(warehouseMapper.toDto(created));
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–∫–ª–∞–¥
     */
    @PutMapping("/{id}")
    public ResponseEntity<WarehouseDto> updateWarehouse(@PathVariable UUID id, @RequestBody WarehouseDto warehouseDto) {
        log.info("‚úèÔ∏è Updating warehouse: {}", id);
        Warehouse warehouse = warehouseMapper.toEntity(warehouseDto);
        warehouse.setId(id);
        Warehouse updated = warehouseService.updateWarehouse(warehouse);
        return ResponseEntity.ok(warehouseMapper.toDto(updated));
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥ (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteWarehouse(@PathVariable UUID id) {
        log.info("üóëÔ∏è Deleting warehouse: {}", id);
        warehouseService.deleteWarehouse(id);
        return ResponseEntity.ok().build();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–∫–ª–∞–¥ –ø–æ ID
     */
    @GetMapping("/{id}")
    public ResponseEntity<WarehouseDto> getWarehouse(@PathVariable UUID id) {
        log.info("üì¶ Getting warehouse: {}", id);
        Warehouse warehouse = warehouseService.getWarehouse(id);
        return ResponseEntity.ok(warehouseMapper.toDto(warehouse));
    }
}

