package ru.dmitartur.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.dmitartur.service.ProductStockService;
import ru.dmitartur.service.StockSyncService;
import ru.dmitartur.common.utils.JwtUtil;
import ru.dmitartur.dto.ProductStockDto;

import java.util.List;
import java.util.UUID;

@Slf4j
@RestController
@RequestMapping("/api/v1/product-stocks")
@RequiredArgsConstructor
public class ProductStockController {
    
    private final ProductStockService productStockService;
    private final StockSyncService stockSyncService;
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/product/{productId}")
    public ResponseEntity<List<ProductStockDto>> getProductStocks(@PathVariable Long productId) {
        log.info("üì¶ Getting stocks for product: {}", productId);
        List<ProductStockDto> stockDtos = productStockService.getProductStocksWithProduct(productId);
        return ResponseEntity.ok(stockDtos);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/product/{productId}/warehouse/{warehouseId}")
    public ResponseEntity<ProductStockDto> getProductStock(@PathVariable Long productId, @PathVariable UUID warehouseId) {
        log.info("üì¶ Getting stock for product: {} on warehouse: {}", productId, warehouseId);
        ProductStockDto stock = productStockService.getProductStock(productId, warehouseId);
        return ResponseEntity.ok(stock);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
     */
    @GetMapping("/{productStockId}")
    public ResponseEntity<ProductStockDto> getProductStockById(@PathVariable UUID productStockId) {
        log.info("üì¶ Getting stock by ID: {}", productStockId);
        ProductStockDto stock = productStockService.getProductStockById(productStockId);
        return ResponseEntity.ok(stock);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
     */
    @PostMapping
    public ResponseEntity<ProductStockDto> createProductStock(@RequestBody ProductStockDto request) {
        log.info("üì¶ Creating stock for product: {} with {} warehouses", request.getProductId(), 
                request.getWarehouses() != null ? request.getWarehouses().size() : 0);
        ProductStockDto stock = productStockService.createProductStock(request);
        return ResponseEntity.ok(stock);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
     */
    @PutMapping("/{productStockId}")
    public ResponseEntity<ProductStockDto> updateProductStock(
            @PathVariable UUID productStockId,
            @RequestBody ProductStockDto request) {
        log.info("üì¶ Updating stock: {} for product: {}", productStockId, request.getProductId());
        ProductStockDto stock = productStockService.updateProductStock(productStockId, request);
        return ResponseEntity.ok(stock);
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
     */
    @DeleteMapping("/{productStockId}")
    public ResponseEntity<Void> deleteProductStock(@PathVariable UUID productStockId) {
        log.info("üì¶ Deleting stock: {}", productStockId);
        productStockService.deleteProductStock(productStockId);
        return ResponseEntity.ok().build();
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ ProductStock ID
     */
    @PostMapping("/{productStockId}/sync")
    public ResponseEntity<Void> syncStockById(@PathVariable UUID productStockId) {
        log.info("üîÑ Syncing stock by ID: {}", productStockId);
        // TODO: Implement sync by ID method
        throw new UnsupportedOperationException("Method not implemented yet");
    }
}
