package ru.dmitartur.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.dmitartur.service.ProductStockService;
import ru.dmitartur.service.StockSyncService;
import ru.dmitartur.service.WarehouseService;
import ru.dmitartur.service.ProductService;
import ru.dmitartur.common.utils.JwtUtil;
import ru.dmitartur.dto.ProductStockDto;
import ru.dmitartur.entity.ProductStock;
import ru.dmitartur.entity.Product;
import ru.dmitartur.entity.Warehouse;
import ru.dmitartur.mapper.ProductStockMapper;

import java.util.List;
import java.util.UUID;

@Slf4j
@RestController
@RequestMapping("/api/v1/product-stocks")
@RequiredArgsConstructor
public class ProductStockController {
    
    private final ProductStockService productStockService;
    private final StockSyncService stockSyncService;
    private final WarehouseService warehouseService;
    private final ProductService productService;
    private final ProductStockMapper productStockMapper;
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/product/{productId}")
    public ResponseEntity<List<ProductStockDto>> getProductStocks(@PathVariable Long productId) {
        log.info("üì¶ Getting stocks for product: {}", productId);
        List<ProductStockDto> stockDtos = productStockService.getProductStocksWithProduct(productId);
        return ResponseEntity.ok(stockDtos);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–∫–ª–∞–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping("/product/{productId}/warehouse/{warehouseId}")
    public ResponseEntity<ProductStockDto> getProductStock(@PathVariable Long productId, @PathVariable UUID warehouseId) {
        log.info("üì¶ Getting stock for product: {} on warehouse: {}", productId, warehouseId);
        ProductStockDto stock = productStockService.getProductStock(productId, warehouseId);
        return ResponseEntity.ok(stock);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
     */
    @GetMapping("/{productStockId}")
    public ResponseEntity<ProductStockDto> getProductStockById(@PathVariable UUID productStockId) {
        log.info("üì¶ Getting stock by ID: {}", productStockId);
        ProductStockDto stock = productStockService.getProductStockById(productStockId);
        return ResponseEntity.ok(stock);
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
     */
    @PostMapping
    public ResponseEntity<ProductStockDto> createProductStock(@RequestBody ProductStockDto request) {
        log.info("üì¶ Creating stock for product: {} with {} warehouses", request.getProductId(), 
                request.getWarehouses() != null ? request.getWarehouses().size() : 0);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        UUID userId = JwtUtil.getRequiredOwnerId();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        Product product = productService.validateProductOwnership(request.getProductId());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∫–ª–∞–¥—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        warehouseService.validateWarehousesOwnership(request.getWarehouses());
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DTO –≤ Entity
        ProductStock productStock = productStockMapper.toEntity(request);
        productStock.setProduct(product);
        productStock.setUserId(userId);
        productStock.setSyncStatus("NEVER_SYNCED");
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–ª–∞–¥—ã
        if (request.getWarehouses() != null) {
            for (var warehouseDto : request.getWarehouses()) {
                Warehouse warehouse = warehouseService.getWarehouse(warehouseDto.getId());
                productStock.addWarehouse(warehouse);
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        ProductStock saved = productStockService.createProductStock(productStock);
        
        return ResponseEntity.ok(productStockMapper.toDto(saved));
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
     */
    @PutMapping("/{productStockId}")
    public ResponseEntity<ProductStockDto> updateProductStock(
            @PathVariable UUID productStockId,
            @RequestBody ProductStockDto request) {
        log.info("üì¶ Updating stock: {} for product: {}", productStockId, request.getProductId());
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        UUID userId = JwtUtil.getRequiredOwnerId();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
        ProductStock existingStock = productStockService.getProductStockEntityById(productStockId);
        
        if (!existingStock.getUserId().equals(userId)) {
            throw new RuntimeException("–û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∫–ª–∞–¥—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        warehouseService.validateWarehousesOwnership(request.getWarehouses());
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ProductStock —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        ProductStock updatedStock = productStockMapper.toEntity(request);
        updatedStock.setId(existingStock.getId());
        updatedStock.setUserId(existingStock.getUserId());
        updatedStock.setProduct(existingStock.getProduct());
        updatedStock.setLastSyncAt(java.time.LocalDateTime.now());
        updatedStock.setSyncStatus("UPDATED");
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–ª–∞–¥—ã
        if (request.getWarehouses() != null) {
            for (var warehouseDto : request.getWarehouses()) {
                Warehouse warehouse = warehouseService.getWarehouse(warehouseDto.getId());
                updatedStock.addWarehouse(warehouse);
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å (–∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞–ø–ø–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
        ProductStock saved = productStockService.updateProductStockWithContext(updatedStock, "REST_API", "ProductStockController");
        
        return ResponseEntity.ok(productStockMapper.toDto(saved));
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞
     */
    @DeleteMapping("/{productStockId}")
    public ResponseEntity<Void> deleteProductStock(@PathVariable UUID productStockId) {
        log.info("üì¶ Deleting stock: {}", productStockId);
        productStockService.deleteProductStock(productStockId);
        return ResponseEntity.ok().build();
    }
    
    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ ProductStock ID
     */
    @PostMapping("/{productStockId}/sync")
    public ResponseEntity<Void> syncStockById(@PathVariable UUID productStockId) {
        log.info("üîÑ Syncing stock by ID: {}", productStockId);
        // TODO: Implement sync by ID method
        throw new UnsupportedOperationException("Method not implemented yet");
    }
}
