package ru.dmitartur.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.dmitartur.dto.ProductHistoryDto;
import ru.dmitartur.service.ProductHistoryService;

import java.time.LocalDateTime;
import java.util.List;

/**
 * Controller –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/product-history")
@RequiredArgsConstructor
public class ProductHistoryController {
    
    private final ProductHistoryService productHistoryService;
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ ID –ø—Ä–æ–¥—É–∫—Ç–∞
     */
    @GetMapping("/product/{productId}")
    public ResponseEntity<Page<ProductHistoryDto>> getProductHistory(
            @PathVariable Long productId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {
        
        log.info("üìã Getting product history: productId={}, page={}, size={}", productId, page, size);
        
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        Page<ProductHistoryDto> history = productHistoryService.findByProductId(productId, pageable);
        
        return ResponseEntity.ok(history);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø–æ–ª—é
     */
    @GetMapping("/product/{productId}/field/{fieldName}")
    public ResponseEntity<List<ProductHistoryDto>> getProductFieldHistory(
            @PathVariable Long productId,
            @PathVariable String fieldName) {
        
        log.info("üìã Getting product field history: productId={}, field={}", productId, fieldName);
        
        List<ProductHistoryDto> history = productHistoryService.findByProductIdAndField(productId, fieldName);
        return ResponseEntity.ok(history);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –ø—Ä–∏—á–∏–Ω–µ
     */
    @GetMapping("/reason/{changeReason}")
    public ResponseEntity<Page<ProductHistoryDto>> getHistoryByReason(
            @PathVariable String changeReason,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {
        
        log.info("üìã Getting history by reason: reason={}, page={}, size={}", changeReason, page, size);
        
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        Page<ProductHistoryDto> history = productHistoryService.findByChangeReason(changeReason, pageable);
        
        return ResponseEntity.ok(history);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Å–∏—Å—Ç–µ–º–µ-–∏—Å—Ç–æ—á–Ω–∏–∫—É
     */
    @GetMapping("/source/{sourceSystem}")
    public ResponseEntity<Page<ProductHistoryDto>> getHistoryBySourceSystem(
            @PathVariable String sourceSystem,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {
        
        log.info("üìã Getting history by source system: system={}, page={}, size={}", sourceSystem, page, size);
        
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        Page<ProductHistoryDto> history = productHistoryService.findBySourceSystem(sourceSystem, pageable);
        
        return ResponseEntity.ok(history);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    @GetMapping("/source-id/{sourceId}")
    public ResponseEntity<List<ProductHistoryDto>> getHistoryBySourceId(@PathVariable String sourceId) {
        log.info("üìã Getting history by source ID: {}", sourceId);
        
        List<ProductHistoryDto> history = productHistoryService.findBySourceId(sourceId);
        return ResponseEntity.ok(history);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
     */
    @GetMapping("/date-range")
    public ResponseEntity<Page<ProductHistoryDto>> getHistoryByDateRange(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime fromDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime toDate,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {
        
        log.info("üìã Getting history by date range: from={}, to={}, page={}, size={}", fromDate, toDate, page, size);
        
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        Page<ProductHistoryDto> history = productHistoryService.findByDateRange(fromDate, toDate, pageable);
        
        return ResponseEntity.ok(history);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø–æ–ª—è
     */
    @GetMapping("/product/{productId}/field/{fieldName}/last")
    public ResponseEntity<ProductHistoryDto> getLastChangeByProductAndField(
            @PathVariable Long productId,
            @PathVariable String fieldName) {
        
        log.info("üìã Getting last change: productId={}, field={}", productId, fieldName);
        
        return productHistoryService.findLastChangeByProductAndField(productId, fieldName)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ –∏ –ø–µ—Ä–∏–æ–¥—É
     */
    @GetMapping("/reason/{changeReason}/date-range")
    public ResponseEntity<List<ProductHistoryDto>> getHistoryByReasonAndDateRange(
            @PathVariable String changeReason,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime fromDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime toDate) {
        
        log.info("üìã Getting history by reason and date range: reason={}, from={}, to={}", changeReason, fromDate, toDate);
        
        List<ProductHistoryDto> history = productHistoryService.findByChangeReasonAndDateRange(changeReason, fromDate, toDate);
        return ResponseEntity.ok(history);
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
     */
    @GetMapping("/product/{productId}/stats")
    public ResponseEntity<ProductHistoryService.ProductHistoryStats> getProductHistoryStats(@PathVariable Long productId) {
        log.info("üìä Getting product history stats: productId={}", productId);
        
        ProductHistoryService.ProductHistoryStats stats = productHistoryService.getProductHistoryStats(productId);
        return ResponseEntity.ok(stats);
    }
}
