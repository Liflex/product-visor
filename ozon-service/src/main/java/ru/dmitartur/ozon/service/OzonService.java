package ru.dmitartur.ozon.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import ru.dmitartur.common.dto.OrderDto;
import ru.dmitartur.common.dto.marketplace.DateRangeDto;
import ru.dmitartur.common.kafka.KafkaTopics;
import ru.dmitartur.library.marketplace.service.BaseMarketplaceService;
import ru.dmitartur.ozon.integration.OzonSellerApi;
import ru.dmitartur.ozon.kafka.OrderSyncProducer;
import ru.dmitartur.ozon.mapper.OzonOrderMapper;
import ru.dmitartur.ozon.retry.OzonRetryService;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class OzonService implements BaseMarketplaceService {
    private final OzonSellerApi api;
    private final OrderSyncProducer orderSyncProducer;
    private final OzonOrderMapper ozonOrderMapper;
    private final OzonRetryService retryService;
    private final ObjectMapper mapper = new ObjectMapper();

    public JsonNode fboPostingList(JsonNode req) {
        return retryService.executeWithRetry(
            () -> api.fboPostingList(req), 
            "fboPostingList"
        );
    }

    public JsonNode fbsPostingList(JsonNode req) {
        return retryService.executeWithRetry(
            () -> api.fbsPostingList(req), 
            "fbsPostingList"
        );
    }

    public JsonNode fbsPostingGet(JsonNode req) {
        return retryService.executeWithRetry(
            () -> api.fbsPostingGet(req), 
            "fbsPostingGet"
        );
    }

    /**
     * Update OZON stock for a given offer (article). If warehouseId is null/empty, OZON may demand it for FBS.
     */
    public JsonNode updateStock(String offerId, int newQuantity, String warehouseId) {
        if (offerId == null || offerId.isEmpty()) {
            throw new IllegalArgumentException("offerId is required");
        }

        ObjectNode root = mapper.createObjectNode();
        ArrayNode stocks = mapper.createArrayNode();
        ObjectNode item = mapper.createObjectNode();
        item.put("offer_id", offerId);
        item.put("stock", Math.max(0, newQuantity));
        if (warehouseId != null && !warehouseId.isEmpty()) {
            item.put("warehouse_id", warehouseId);
        }
        stocks.add(item);
        root.set("stocks", stocks);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Spring Retry –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
        JsonNode response = retryService.executeUpdateStocksWithRetry(
            () -> api.updateStocks(root), 
            offerId
        );
        
        log.info("OZON updateStocks: offerId={}, qty={}, warehouseId={}, response={}", 
            offerId, newQuantity, warehouseId, response.toString());
        return response;
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ FBO —Å Ozon API
     */
    public int backfillFboOrders(DateRangeDto range, int pageSize) {
        int totalUpserted = 0;
        int offset = 0;
        
        log.info("üîÑ Starting FBO orders backfill from {} to {}", range.getFrom(), range.getTo());
        
        while (true) {
            try {
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ozon API
                var req = mapper.createObjectNode();
                req.putObject("createdAt").put("from", range.getFrom()).put("to", range.getTo());
                req.put("limit", pageSize);
                req.put("offset", offset);
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Ozon API
                JsonNode page = fboPostingList(req);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if (!page.has("result") || !page.get("result").isArray()) {
                    log.warn("‚ö†Ô∏è Unexpected response structure from Ozon API: {}", page.toPrettyString());
                    break;
                }
                
                JsonNode result = page.get("result");
                int size = result.size();
                
                if (size == 0) {
                    log.info("‚úÖ No more FBO orders to process, breaking loop");
                    break;
                }
                
                log.info("üì¶ Processing {} FBO orders from offset {}", size, offset);
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–∫–∞–∑—ã –≤ OrderDto
                List<OrderDto> orderDtos = ozonOrderMapper.mapOzonOrdersToDtoList(result);
                
                if (!orderDtos.isEmpty()) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ Kafka –∫–∞–∫ OrderDto –±–µ–∑ JsonNode
                    orderDtos.forEach(order -> orderSyncProducer.publishOrder(order.getCompanyId().toString(), order));
                    totalUpserted += orderDtos.size();
                    log.info("‚úÖ Published {} FBO orders to Kafka '{}', total published: {}", size, KafkaTopics.ORDER_SYNC_TOPIC, totalUpserted);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
                if (size < pageSize) {
                    log.info("‚úÖ Reached end of FBO data, breaking loop");
                    break;
                }
                
                offset += pageSize;
                
            } catch (Exception e) {
                log.error("‚ùå Error processing FBO orders at offset {}: {}", offset, e.getMessage(), e);
                break;
            }
        }
        
        log.info("‚úÖ FBO backfill finished, total upserted: {} orders", totalUpserted);
        return totalUpserted;
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ FBS —Å Ozon API
     */
    public int backfillFbsOrders(DateRangeDto range, int pageSize) {
        int totalUpserted = 0;
        int offset = 0;
        
        log.info("üîÑ Starting FBS orders backfill from {} to {}", range.getFrom(), range.getTo());
        
        while (true) {
            try {
                            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ozon API –¥–ª—è FBS —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            var req = mapper.createObjectNode();
            req.put("limit", pageSize);
            req.put("offset", offset);
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            // Google Protobuf Timestamp —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
            var filter = req.putObject("filter");
            filter.put("since", formatDateForOzonApi(range.getFrom()));
            filter.put("to", formatDateForOzonApi(range.getTo()));
                
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Ozon API
                log.debug("üì§ Sending FBS request: {}", req.toPrettyString());
                JsonNode page = fbsPostingList(req);
                log.debug("üì• Received FBS response: {}", page.toPrettyString());
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ API
                if (page.has("error")) {
                    log.error("‚ùå FBS API error: {}", page.get("error").toPrettyString());
                    break;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ FBS —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                if (!page.has("result")) {
                    log.warn("‚ö†Ô∏è FBS response missing 'result' field: {}", page.toPrettyString());
                    break;
                }
                
                JsonNode resultNode = page.get("result");
                JsonNode result;
                
                // –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, FBS API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç postings –≤ result
                if (resultNode.has("postings") && resultNode.get("postings").isArray()) {
                    result = resultNode.get("postings");
                } else {
                    log.warn("‚ö†Ô∏è FBS response missing 'postings' array: {}", page.toPrettyString());
                    break;
                }
                int size = result.size();
                
                if (size == 0) {
                    log.info("‚úÖ No more FBS orders to process, breaking loop");
                    break;
                }
                
                log.info("üì¶ Processing {} FBS orders from offset {}", size, offset);
                
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–∫–∞–∑—ã –≤ OrderDto
                List<OrderDto> orderDtos = ozonOrderMapper.mapOzonFbsOrdersToDtoList(result);
                if (!orderDtos.isEmpty()) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ Kafka –∫–∞–∫ OrderDto –±–µ–∑ JsonNode
                    orderDtos.forEach(order -> orderSyncProducer.publishOrder(order.getCompanyId().toString(), order));
                    totalUpserted += orderDtos.size();
                    log.info("‚úÖ Published {} FBS orders to Kafka '{}', total published: {}", size, KafkaTopics.ORDER_SYNC_TOPIC, totalUpserted);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
                if (size < pageSize) {
                    log.info("‚úÖ Reached end of FBS data, breaking loop");
                    break;
                }
                
                offset += pageSize;
                
            } catch (Exception e) {
                log.error("‚ùå Error processing FBS orders at offset {}: {}", offset, e.getMessage(), e);
                break;
            }
        }
        
        log.info("‚úÖ FBS backfill finished, total upserted: {} orders", totalUpserted);
        return totalUpserted;
    }

    /**
     * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ FBO –∏ FBS —Å Ozon API
     * –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç FBO, –∑–∞—Ç–µ–º FBS –∑–∞–∫–∞–∑—ã
     */
    @Override
    public Integer backfillAllOrders(DateRangeDto range, int pageSize) {
        log.info("üöÄ Starting combined FBO + FBS orders backfill from {} to {}", range.getFrom(), range.getTo());
        
        int totalFboUpserted = 0;
        int totalFbsUpserted = 0;
        
        try {
            // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è FBO –∑–∞–∫–∞–∑–æ–≤
            log.info("üì¶ Step 1: Starting FBO orders synchronization...");
            totalFboUpserted = backfillFboOrders(range, pageSize);
            log.info("‚úÖ FBO synchronization completed: {} orders", totalFboUpserted);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è–º–∏
            Thread.sleep(1000);
            
            // 2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è FBS –∑–∞–∫–∞–∑–æ–≤ (–µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω)
            log.info("üì¶ Step 2: Checking FBS API availability...");
            log.info("üì¶ Step 2: Starting FBS orders synchronization...");
            totalFbsUpserted = backfillFbsOrders(range, pageSize);
            log.info("‚úÖ FBS synchronization completed: {} orders", totalFbsUpserted);
            
        } catch (InterruptedException e) {
            log.error("‚ùå Synchronization interrupted: {}", e.getMessage());
            Thread.currentThread().interrupt();
        } catch (Exception e) {
            log.error("‚ùå Error during combined synchronization: {}", e.getMessage(), e);
        }
        
        int totalUpserted = totalFboUpserted + totalFbsUpserted;
        log.info("üéØ Combined synchronization finished: FBO={}, FBS={}, Total={} orders", 
                totalFboUpserted, totalFbsUpserted, totalUpserted);
        
        return totalUpserted;
    }

    // gRPC conversion no longer needed after switching to Kafka
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è API Ozon –≤ —Ñ–æ—Ä–º–∞—Ç–µ Google Protobuf Timestamp
     * –§–æ—Ä–º–∞—Ç: "2024-01-01T00:00:00.000Z"
     */
    private String formatDateForOzonApi(String dateString) {
        try {
            // –ü–∞—Ä—Å–∏–º –≤—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç ISO)
            LocalDateTime dateTime = LocalDateTime.parse(dateString, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏ –∏ Z (UTC)
            return dateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"));
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Failed to parse date '{}', using as-is: {}", dateString, e.getMessage());
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return dateString;
        }
    }
    
    @Override
    public String getMarketplaceName() {
        return "Ozon";
    }
    
    @Override
    public boolean testConnection() {
        try {
            // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
            JsonNode response = api.listWarehouses();
            return response != null && !response.has("error");
        } catch (Exception e) {
            log.error("‚ùå Connection test failed: {}", e.getMessage());
            return false;
        }
    }
}


