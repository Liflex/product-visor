package ru.dmitartur.ozon.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.dmitartur.common.security.SecurityUtils;
import ru.dmitartur.common.utils.JwtUtil;
import ru.dmitartur.library.marketplace.entity.CompanyCredentials;
import ru.dmitartur.library.marketplace.service.CompanyCredentialsService;
import ru.dmitartur.ozon.integration.OzonApi;
import ru.dmitartur.ozon.dto.ConnectionStatusResponse;

import java.util.Optional;
import java.util.UUID;

@Slf4j
@RestController
@RequestMapping("/api/ozon/credentials")
@RequiredArgsConstructor
public class CompanyCredentialsController {

    private final CompanyCredentialsService credentialsService;
    private final OzonApi ozonApi;

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
     */
    @GetMapping
    public ResponseEntity<CompanyCredentials> getForCurrentCompany() {
        UUID companyId = JwtUtil.resolveEffectiveCompanyId().map(UUID::fromString).orElseThrow();
        log.info("üîç Getting Ozon credentials for company: {}", companyId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
        if (!SecurityUtils.hasAccessToCompany(companyId)) {
            log.warn("‚ùå Access denied to company: {} for user: {}", companyId, JwtUtil.getCurrentId().orElse("unknown"));
            return ResponseEntity.status(403).build();
        }
        
        Optional<CompanyCredentials> credentials = credentialsService.findByCompanyIdAndMarketplace(companyId, "OZON");
        if (credentials.isPresent()) {
            // –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            CompanyCredentials result = credentials.get();
            result.setAccessToken("***");
            result.setRefreshToken("***");
            
            return ResponseEntity.ok(result);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é)
     */
    @PostMapping
    public ResponseEntity<CompanyCredentials> upsert(@RequestBody CompanyCredentials payload) {
        UUID companyId = JwtUtil.resolveEffectiveCompanyId().map(UUID::fromString).orElseThrow();
        UUID userId = JwtUtil.getRequiredOwnerId();
        log.info("üíæ Saving Ozon credentials for company: {} by user: {}", companyId, userId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
        if (!SecurityUtils.hasAccessToCompany(companyId)) {
            log.warn("‚ùå Access denied to save credentials for company: {} for user: {}", companyId, userId);
            return ResponseEntity.status(403).build();
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (payload.getClientId() == null || payload.getClientId().trim().isEmpty()) {
            log.warn("‚ùå Invalid clientId provided for company: {}", companyId);
            return ResponseEntity.badRequest().build();
        }
        
        if (payload.getApiKey() == null || payload.getApiKey().trim().isEmpty()) {
            log.warn("‚ùå Invalid apiKey provided for company: {}", companyId);
            return ResponseEntity.badRequest().build();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        Optional<CompanyCredentials> existingCredentials = credentialsService.findByCompanyIdAndMarketplace(companyId, "OZON");
        
        CompanyCredentials credentialsToSave;
        if (existingCredentials.isPresent()) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            credentialsToSave = existingCredentials.get();
            credentialsToSave.setApiKey(payload.getApiKey());
            credentialsToSave.setActive(true);
            log.info("üîÑ Updating existing Ozon credentials for company: {}", companyId);
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            payload.setCompanyId(companyId);
            payload.setUserId(userId);
            payload.setMarketplaceType("OZON");
            payload.setActive(true);
            credentialsToSave = payload;
            log.info("‚ûï Creating new Ozon credentials for company: {}", companyId);
        }
        
        CompanyCredentials saved = credentialsService.save(credentialsToSave);
        
        // –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ
        saved.setAccessToken("***");
        saved.setRefreshToken("***");
        
        log.info("‚úÖ Ozon credentials saved successfully for company: {}", companyId);
        return ResponseEntity.ok(saved);
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ ID
     */
    @PutMapping("/{id}")
    public ResponseEntity<CompanyCredentials> update(@PathVariable Long id, @RequestBody CompanyCredentials payload) {
        UUID companyId = JwtUtil.resolveEffectiveCompanyId().map(UUID::fromString).orElseThrow();
        UUID userId = JwtUtil.getRequiredOwnerId();
        log.info("üîÑ Updating Ozon credentials with id: {} for company: {} by user: {}", id, companyId, userId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
        if (!SecurityUtils.hasAccessToCompany(companyId)) {
            log.warn("‚ùå Access denied to update credentials for company: {} for user: {}", companyId, userId);
            return ResponseEntity.status(403).build();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        Optional<CompanyCredentials> existingCredentials = credentialsService.findByCompanyIdAndMarketplace(companyId, "OZON");
        if (existingCredentials.isEmpty()) {
            log.warn("‚ùå Credentials not found for company: {}", companyId);
            return ResponseEntity.notFound().build();
        }
        
        CompanyCredentials existing = existingCredentials.get();
        if (!existing.getId().equals(id)) {
            log.warn("‚ùå ID mismatch for credentials update. Expected: {}, got: {}", existing.getId(), id);
            return ResponseEntity.badRequest().build();
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (payload.getClientId() == null || payload.getClientId().trim().isEmpty()) {
            log.warn("‚ùå Invalid clientId provided for company: {}", companyId);
            return ResponseEntity.badRequest().build();
        }
        
        if (payload.getApiKey() == null || payload.getApiKey().trim().isEmpty()) {
            log.warn("‚ùå Invalid apiKey provided for company: {}", companyId);
            return ResponseEntity.badRequest().build();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        existing.setClientId(payload.getClientId());
        existing.setApiKey(payload.getApiKey());
        
        CompanyCredentials saved = credentialsService.save(existing);
        
        // –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ
        saved.setAccessToken("***");
        saved.setRefreshToken("***");
        
        log.info("‚úÖ Ozon credentials updated successfully for company: {}", companyId);
        return ResponseEntity.ok(saved);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å)
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> delete(@PathVariable Long id) {
        UUID companyId = JwtUtil.resolveEffectiveCompanyId().map(UUID::fromString).orElseThrow();
        UUID userId = JwtUtil.getRequiredOwnerId();
        log.info("üóëÔ∏è Deleting Ozon credentials with id: {} for company: {} by user: {}", id, companyId, userId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
        if (!SecurityUtils.hasAccessToCompany(companyId)) {
            log.warn("‚ùå Access denied to delete credentials for company: {} for user: {}", companyId, userId);
            return ResponseEntity.status(403).build();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        Optional<CompanyCredentials> existingCredentials = credentialsService.findByCompanyIdAndMarketplace(companyId, "OZON");
        if (existingCredentials.isEmpty()) {
            log.warn("‚ùå Credentials not found for company: {}", companyId);
            return ResponseEntity.notFound().build();
        }
        
        CompanyCredentials existing = existingCredentials.get();
        if (!existing.getId().equals(id)) {
            log.warn("‚ùå ID mismatch for credentials deletion. Expected: {}, got: {}", existing.getId(), id);
            return ResponseEntity.badRequest().build();
        }
        
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        credentialsService.deactivate(companyId, "OZON");
        
        log.info("‚úÖ Ozon credentials deactivated successfully for company: {}", companyId);
        return ResponseEntity.noContent().build();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ozon API
     */
    @GetMapping("/status")
    public ResponseEntity<ConnectionStatusResponse> getStatus() {
        UUID companyId = JwtUtil.resolveEffectiveCompanyId().map(UUID::fromString).orElseThrow();
        log.info("üîç Checking Ozon credentials status and API connection for company: {}", companyId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
        if (!SecurityUtils.hasAccessToCompany(companyId)) {
            log.warn("‚ùå Access denied to check credentials status for company: {} for user: {}", companyId, JwtUtil.getCurrentId().orElse("unknown"));
            return ResponseEntity.status(403).build();
        }
        
        Optional<CompanyCredentials> credentials = credentialsService.findByCompanyIdAndMarketplace(companyId, "OZON");
        
        if (credentials.isPresent()) {
            CompanyCredentials cred = credentials.get();
            return ResponseEntity.ok(createStatusResponse(cred, companyId));
        } else {
            return ResponseEntity.ok(createEmptyStatusResponse());
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private ConnectionStatusResponse createStatusResponse(CompanyCredentials cred, UUID companyId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ozon API
        boolean connectionTestResult = false;
        String connectionErrorMsg = null;
        
        try {
            log.debug("üîç Testing Ozon API connection for company: {}", companyId);
            connectionTestResult = ozonApi.testConnection();
            if (!connectionTestResult) {
                connectionErrorMsg = "API connection failed - check credentials or network";
            }
        } catch (Exception e) {
            log.error("‚ùå Error testing Ozon API connection for company: {}: {}", companyId, e.getMessage());
            connectionErrorMsg = "API connection error: " + e.getMessage();
        }
        
        return new ConnectionStatusResponse(
            true, // exists
            connectionTestResult,
            connectionErrorMsg,
            cred.getSyncStatus(),
            cred.getLastSyncAt() != null ? cred.getLastSyncAt().toString() : null,
            cred.getErrorMessage()
        );
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private ConnectionStatusResponse createEmptyStatusResponse() {
        return new ConnectionStatusResponse(
            false, // exists
            false, // apiConnectionTest
            "No credentials configured", // connectionError
            null, // syncStatus
            null, // lastSyncAt
            null  // errorMessage
        );
    }
}




