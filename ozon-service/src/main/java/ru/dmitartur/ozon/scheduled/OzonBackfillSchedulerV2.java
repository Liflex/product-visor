package ru.dmitartur.ozon.scheduled;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import ru.dmitartur.common.dto.marketplace.DateRangeDto;
import ru.dmitartur.common.security.CompanyContextHolder;
import ru.dmitartur.library.marketplace.entity.CompanyCredentials;
import ru.dmitartur.ozon.entity.SyncCheckpoint;
import ru.dmitartur.ozon.repository.SyncCheckpointRepository;
import ru.dmitartur.library.marketplace.service.CompanyCredentialsService;
import ru.dmitartur.ozon.service.OzonService;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Ozon —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
 * - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
 * - –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * - –ë–æ–ª–µ–µ —á–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 * - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * - –õ—É—á—à–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class OzonBackfillSchedulerV2 {
    
    private final OzonService ozonService;
    private final SyncCheckpointRepository syncCheckpointRepository;
    private final CompanyCredentialsService companyCredentialsService;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    @Value("${app.sync.checkpoint-name:FBO_ORDERS}")
    private String checkpointName;
    
    @Value("${app.sync.max-gap-minutes:1}")
    private int maxGapMinutes;
    
    @Value("${app.sync.enabled:true}")
    private boolean syncEnabled;
    
    @Value("${app.sync.initial-delay-ms:10000}")
    private long initialDelayMs;
    
    @Value("${app.sync.periodic-interval-ms:120000}")
    private long periodicIntervalMs;
    
    @Value("${app.sync.batch-size:1000}")
    private int batchSize;
    
    @Value("${app.sync.initial-sync-days:180}")
    private int initialSyncDays;
    
    @Value("${app.sync.async-enabled:true}")
    private boolean asyncEnabled;
    
    // –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    private final Executor asyncExecutor = Executors.newFixedThreadPool(3);
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @Scheduled(initialDelayString = "${app.sync.initial-delay-ms:10000}", fixedDelay = Long.MAX_VALUE)
    @Transactional
    public void checkSyncOnStartup() {
        if (!syncEnabled) {
            log.info("üîÑ Sync service is disabled");
            return;
        }
        
        log.info("üîÑ Starting sync check on application startup...");
        
        try {
            List<CompanyCredentials> companies = getCompaniesWithCredentials();
            if (companies.isEmpty()) {
                log.warn("‚ö†Ô∏è No companies found with credentials");
                return;
            }
            
            log.info("üè¢ Found {} companies, starting sync process", companies.size());
            
            if (asyncEnabled) {
                processCompaniesAsync(companies, this::performSyncForCompany);
            } else {
                companies.forEach(this::performSyncForCompany);
            }
            
        } catch (Exception e) {
            log.error("‚ùå Critical error during startup sync check", e);
        }
    }
    
    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    @Scheduled(fixedDelayString = "${app.sync.periodic-interval-ms:120000}")
    @Transactional
    public void periodicSyncCheck() {
        if (!syncEnabled) {
            return;
        }
        
        log.debug("üîÑ Performing periodic sync check...");
        
        try {
            List<CompanyCredentials> companies = getCompaniesWithCredentials();
            if (companies.isEmpty()) {
                return;
            }
            
            if (asyncEnabled) {
                processCompaniesAsync(companies, this::performPeriodicSyncForCompany);
            } else {
                companies.forEach(this::performPeriodicSyncForCompany);
            }
            
        } catch (Exception e) {
            log.error("‚ùå Error during periodic sync check", e);
        }
    }
    
    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
     */
    private void processCompaniesAsync(List<CompanyCredentials> companies, 
                                     CompanySyncFunction syncFunction) {
        List<CompletableFuture<Void>> futures = companies.stream()
                .map(company -> CompletableFuture.runAsync(() -> {
                    try {
                        syncFunction.apply(company);
                    } catch (Exception e) {
                        log.error("‚ùå Error processing company {}: {}", 
                                company.getCompanyId(), e.getMessage(), e);
                    }
                }, asyncExecutor))
                .toList();
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
                .exceptionally(throwable -> {
                    log.error("‚ùå Error in async processing", throwable);
                    return null;
                });
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
     */
    private void performSyncForCompany(CompanyCredentials company) {
        String companyId = company.getCompanyId().toString();
        log.info("üè¢ Starting sync for company: {}", companyId);
        
        try (CompanyContext context = new CompanyContext(company)) {
            Optional<SyncCheckpoint> checkpoint = getCheckpointForCompany(companyId);
            
            if (checkpoint.isEmpty()) {
                log.info("üÜï No checkpoint found for company {}, performing initial sync", companyId);
                performInitialSyncForCompany(company);
            } else {
                SyncCheckpoint cp = checkpoint.get();
                Duration gap = Duration.between(cp.getLastSyncAt(), LocalDateTime.now());
                
                if (gap.toMinutes() > maxGapMinutes) {
                    log.warn("‚ö†Ô∏è Large sync gap detected for company {}: {} hours", 
                            companyId, gap.toHours());
                    performCatchUpSyncForCompany(cp, company);
                } else {
                    log.debug("‚úÖ Sync is up to date for company {}, last sync: {} hours ago", 
                            companyId, gap.toHours());
                }
            }
        } catch (Exception e) {
            log.error("‚ùå Error during sync for company {}: {}", companyId, e.getMessage(), e);
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
     */
    private void performPeriodicSyncForCompany(CompanyCredentials company) {
        String companyId = company.getCompanyId().toString();
        
        try (CompanyContext context = new CompanyContext(company)) {
            Optional<SyncCheckpoint> checkpoint = getCheckpointForCompany(companyId);
            
            if (checkpoint.isPresent()) {
                SyncCheckpoint cp = checkpoint.get();
                Duration gap = Duration.between(cp.getLastSyncAt(), LocalDateTime.now());
                
                if (gap.toMinutes() > maxGapMinutes) {
                    log.info("üîÑ Periodic sync triggered for company {}, gap: {} hours", 
                            companyId, gap.toHours());
                    performCatchUpSyncForCompany(cp, company);
                }
            }
        } catch (Exception e) {
            log.error("‚ùå Error during periodic sync for company {}: {}", companyId, e.getMessage(), e);
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
     */
    @Transactional
    public void performInitialSyncForCompany(CompanyCredentials company) {
        String companyId = company.getCompanyId().toString();
        log.info("üöÄ Starting initial sync for company: {}", companyId);
        
        SyncMetrics metrics = new SyncMetrics();
        SyncCheckpoint checkpoint = createCheckpoint(companyId, "IN_PROGRESS");
        
        try {
            LocalDateTime from = LocalDateTime.now().minusDays(initialSyncDays);
            LocalDateTime to = LocalDateTime.now();
            
            log.info("üöÄ Initial sync for company {}: loading orders for the last {} days ({} to {})",
                    companyId, initialSyncDays, from, to);
            
            int processedOrders = ozonService.backfillAllOrders(
                    new DateRangeDto(from.toString(), to.toString()), 
                    batchSize
            );
            
            updateCheckpointSuccess(checkpoint, processedOrders, metrics.getDuration());
            
            log.info("‚úÖ Initial sync completed for company {}: {} orders processed in {} ms",
                    companyId, processedOrders, metrics.getDuration());
            
        } catch (Exception e) {
            updateCheckpointFailure(checkpoint, e.getMessage(), metrics.getDuration());
            log.error("‚ùå Initial sync failed for company {}: {}", companyId, e.getMessage(), e);
            throw new SyncException("Initial sync failed for company " + companyId, e);
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–≥–æ–Ω—è—é—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
     */
    @Transactional
    public void performCatchUpSyncForCompany(SyncCheckpoint checkpoint, CompanyCredentials company) {
        String companyId = company.getCompanyId().toString();
        log.info("üîÑ Starting catch-up sync for company {} from {}", 
                companyId, checkpoint.getLastSyncAt());
        
        SyncMetrics metrics = new SyncMetrics();
        updateCheckpointStatus(checkpoint, "IN_PROGRESS");
        
        try {
            LocalDateTime from = checkpoint.getLastSyncAt();
            LocalDateTime to = LocalDateTime.now();
            
            int processedOrders = ozonService.backfillAllOrders(
                    new DateRangeDto(from.toString(), to.toString()), 
                    batchSize
            );
            
            updateCheckpointSuccess(checkpoint, processedOrders, metrics.getDuration());
            
            log.info("‚úÖ Catch-up sync completed for company {}: {} orders processed in {} ms",
                    companyId, processedOrders, metrics.getDuration());
            
        } catch (Exception e) {
            updateCheckpointFailure(checkpoint, e.getMessage(), metrics.getDuration());
            log.error("‚ùå Catch-up sync failed for company {}: {}", companyId, e.getMessage(), e);
            throw new SyncException("Catch-up sync failed for company " + companyId, e);
        }
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π
     */
    @Transactional
    public void forceSyncAllCompanies() {
        log.info("üîÑ Force sync requested for all companies");
        
        List<CompanyCredentials> companies = getCompaniesWithCredentials();
        
        if (companies.isEmpty()) {
            log.warn("‚ö†Ô∏è No companies found with credentials");
            return;
        }
        
        log.info("üè¢ Force syncing {} companies", companies.size());
        
        if (asyncEnabled) {
            processCompaniesAsync(companies, this::forceSyncForCompany);
        } else {
            companies.forEach(this::forceSyncForCompany);
        }
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
     */
    private void forceSyncForCompany(CompanyCredentials company) {
        try (CompanyContext context = new CompanyContext(company)) {
            performInitialSyncForCompany(company);
        } catch (Exception e) {
            log.error("‚ùå Force sync failed for company {}: {}", 
                    company.getCompanyId(), e.getMessage(), e);
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    private List<CompanyCredentials> getCompaniesWithCredentials() {
        return companyCredentialsService.findAll();
    }
    
    private Optional<SyncCheckpoint> getCheckpointForCompany(String companyId) {
        return syncCheckpointRepository.findByCheckpointName(checkpointName + "_" + companyId);
    }
    
    private SyncCheckpoint createCheckpoint(String companyId, String status) {
        SyncCheckpoint checkpoint = new SyncCheckpoint(checkpointName + "_" + companyId, LocalDateTime.now());
        checkpoint.setStatus(status);
        return syncCheckpointRepository.save(checkpoint);
    }
    
    private void updateCheckpointSuccess(SyncCheckpoint checkpoint, int ordersProcessed, long duration) {
        checkpoint.setOrdersProcessed(ordersProcessed);
        checkpoint.setStatus("SUCCESS");
        checkpoint.setLastSyncAt(LocalDateTime.now());
        checkpoint.setSyncDurationMs(duration);
        syncCheckpointRepository.save(checkpoint);
    }
    
    private void updateCheckpointFailure(SyncCheckpoint checkpoint, String errorMessage, long duration) {
        checkpoint.setStatus("FAILED");
        checkpoint.setErrorMessage(errorMessage);
        checkpoint.setSyncDurationMs(duration);
        syncCheckpointRepository.save(checkpoint);
    }
    
    private void updateCheckpointStatus(SyncCheckpoint checkpoint, String status) {
        checkpoint.setStatus(status);
        syncCheckpointRepository.save(checkpoint);
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    public Optional<SyncCheckpoint> getLastSyncInfo() {
        return syncCheckpointRepository.findByCheckpointName(checkpointName);
    }
    
    public Optional<SyncCheckpoint> getLastSyncInfoForCompany(UUID companyId) {
        return syncCheckpointRepository.findByCheckpointName(checkpointName + "_" + companyId);
    }
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    
    /**
     * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏
     */
    @FunctionalInterface
    private interface CompanySyncFunction {
        void apply(CompanyCredentials company);
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–ø–∞–Ω–∏–∏
     */
    private static class CompanyContext implements AutoCloseable {
        private final String companyId;
        private final String userId;
        
        public CompanyContext(CompanyCredentials company) {
            this.companyId = company.getCompanyId().toString();
            this.userId = company.getUserId().toString();
            CompanyContextHolder.setContext(companyId, userId);
        }
        
        @Override
        public void close() {
            CompanyContextHolder.clear();
        }
    }
    
    /**
     * –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    private static class SyncMetrics {
        private final long startTime = System.currentTimeMillis();
        
        public long getDuration() {
            return System.currentTimeMillis() - startTime;
        }
    }
    
    /**
     * –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    public static class SyncException extends RuntimeException {
        public SyncException(String message, Throwable cause) {
            super(message, cause);
        }
    }
}
