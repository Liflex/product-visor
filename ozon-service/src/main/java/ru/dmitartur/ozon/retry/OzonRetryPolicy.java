package ru.dmitartur.ozon.retry;

import com.fasterxml.jackson.databind.JsonNode;
import lombok.extern.slf4j.Slf4j;
import org.springframework.retry.RetryContext;
import org.springframework.retry.policy.SimpleRetryPolicy;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.Map;

/**
 * –ö–∞—Å—Ç–æ–º–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ retry –¥–ª—è OZON API
 */
@Slf4j
@Component
public class OzonRetryPolicy extends SimpleRetryPolicy {
    
    public OzonRetryPolicy() {
        super(5, createRetryableExceptions(), true); // 5 –ø–æ–ø—ã—Ç–æ–∫, —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    }
    
    private static Map<Class<? extends Throwable>, Boolean> createRetryableExceptions() {
        Map<Class<? extends Throwable>, Boolean> retryableExceptions = new HashMap<>();
        retryableExceptions.put(RuntimeException.class, true);
        retryableExceptions.put(Exception.class, true);
        return retryableExceptions;
    }
    
    @Override
    public boolean canRetry(RetryContext context) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç API —Å –æ—à–∏–±–∫–æ–π
        Object lastThrowable = context.getLastThrowable();
        if (lastThrowable instanceof OzonApiException) {
            OzonApiException apiException = (OzonApiException) lastThrowable;
            return isRetryableError(apiException.getErrorCode(), apiException.getErrorMessage());
        }
        
        return super.canRetry(context);
    }
    
    private boolean isRetryableError(String errorCode, String errorMessage) {
        if (errorCode == null) {
            return false;
        }
        
        switch (errorCode) {
            case "TOO_MANY_REQUESTS":
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "Stock is updated too frequently"
                if (errorMessage != null && errorMessage.contains("too frequently")) {
                    log.info("üìä TOO_MANY_REQUESTS: Stock is updated too frequently - will retry");
                    return true;
                }
                return true;
                
            case "RATE_LIMIT_EXCEEDED":
            case "SERVICE_UNAVAILABLE":
            case "INTERNAL_SERVER_ERROR":
            case "GATEWAY_TIMEOUT":
            case "BAD_GATEWAY":
                log.info("üîÑ Retryable error detected: code={}", errorCode);
                return true;
                
            default:
                log.debug("‚ùå Non-retryable error: code={}", errorCode);
                return false;
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
     */
    public boolean shouldRetryForResponse(JsonNode response) {
        if (response == null) {
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ result –º–∞—Å—Å–∏–≤–µ (–¥–ª—è updateStocks)
        if (response.has("result") && response.get("result").isArray()) {
            JsonNode result = response.get("result");
            for (JsonNode item : result) {
                if (item.has("errors") && item.get("errors").isArray()) {
                    JsonNode errors = item.get("errors");
                    for (JsonNode error : errors) {
                        String errorCode = error.path("code").asText();
                        String errorMessage = error.path("message").asText();
                        
                        if (isRetryableError(errorCode, errorMessage)) {
                            return true;
                        }
                    }
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–±—â–∏–µ –æ—à–∏–±–∫–∏ API
        if (response.has("error")) {
            JsonNode error = response.get("error");
            String errorCode = error.path("code").asText();
            return isRetryableError(errorCode, "");
        }
        
        return false;
    }
}
