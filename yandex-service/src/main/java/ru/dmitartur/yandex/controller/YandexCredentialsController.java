package ru.dmitartur.yandex.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.dmitartur.common.security.SecurityUtils;
import ru.dmitartur.common.utils.JwtUtil;
import ru.dmitartur.library.marketplace.entity.CompanyCredentials;
import ru.dmitartur.library.marketplace.service.CompanyCredentialsService;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Slf4j
@RestController
@RequestMapping("/api/v1/yandex/credentials")
@RequiredArgsConstructor
public class YandexCredentialsController {
    
    private final CompanyCredentialsService credentialsService;
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Yandex –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
     */
    @GetMapping("/{companyId}")
    public ResponseEntity<CompanyCredentials> getCredentials(@PathVariable UUID companyId) {
        log.info("üîç Getting Yandex credentials for company: {}", companyId);
        
        try {
            SecurityUtils.requireAccessToCompany(companyId);
        } catch (SecurityException e) {
            log.warn("‚ùå {}", e.getMessage());
            return ResponseEntity.status(403).build();
        }
        
        Optional<CompanyCredentials> credentials = credentialsService.findByCompanyIdAndMarketplace(companyId, "YANDEX");
        if (credentials.isPresent()) {
            // –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            CompanyCredentials result = credentials.get();
            result.setClientSecret("***");
            result.setAccessToken("***");
            result.setRefreshToken("***");
            
            return ResponseEntity.ok(result);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Yandex
     */
    @PostMapping("/{companyId}")
    public ResponseEntity<CompanyCredentials> saveCredentials(
            @PathVariable UUID companyId, 
            @RequestBody CompanyCredentials credentials) {
        
        log.info("üíæ Saving Yandex credentials for company: {}", companyId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
        if (!SecurityUtils.hasAccessToCompany(companyId)) {
            log.warn("‚ùå Access denied to save credentials for company: {} for user: {}", companyId, JwtUtil.getCurrentId().orElse("unknown"));
            return ResponseEntity.status(403).build();
        }
        
        credentials.setCompanyId(companyId);
        credentials.setMarketplace("YANDEX");
        credentials.setActive(true);
        
        CompanyCredentials saved = credentialsService.save(credentials);
        
        // –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ
        saved.setClientSecret("***");
        saved.setAccessToken("***");
        saved.setRefreshToken("***");
        
        return ResponseEntity.ok(saved);
    }
    
    /**
     * –£–¥–∞–ª–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Yandex
     */
    @DeleteMapping("/{companyId}")
    public ResponseEntity<Void> deleteCredentials(@PathVariable UUID companyId) {
        log.info("üóëÔ∏è Deactivating Yandex credentials for company: {}", companyId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
        if (!SecurityUtils.hasAccessToCompany(companyId)) {
            log.warn("‚ùå Access denied to delete credentials for company: {} for user: {}", companyId, JwtUtil.getCurrentId().orElse("unknown"));
            return ResponseEntity.status(403).build();
        }
        
        credentialsService.deactivate(companyId, "YANDEX");
        return ResponseEntity.ok().build();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    @GetMapping("/{companyId}/status")
    public ResponseEntity<Object> getCredentialsStatus(@PathVariable UUID companyId) {
        log.info("üìä Checking Yandex credentials status for company: {}", companyId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–ø–∞–Ω–∏–∏
        if (!SecurityUtils.hasAccessToCompany(companyId)) {
            log.warn("‚ùå Access denied to check status for company: {} for user: {}", companyId, JwtUtil.getCurrentId().orElse("unknown"));
            return ResponseEntity.status(403).build();
        }
        
        Optional<CompanyCredentials> credentials = credentialsService.findByCompanyIdAndMarketplace(companyId, "YANDEX");
        if (credentials.isPresent()) {
            CompanyCredentials cred = credentials.get();
            return ResponseEntity.ok(java.util.Map.of(
                    "exists", true,
                    "isActive", cred.isActive(),
                    "hasValidToken", cred.isTokenValid(),
                    "needsTokenRefresh", cred.needsTokenRefresh(),
                    "tokenExpiresAt", cred.getTokenExpiresAt()
            ));
        } else {
            return ResponseEntity.ok(java.util.Map.of("exists", false));
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Yandex (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
     */
    @GetMapping("/all")
    public ResponseEntity<List<CompanyCredentials>> getAllActiveCredentials() {
        log.info("üîç Getting all active Yandex credentials");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞
        if (!SecurityUtils.isAdmin()) {
            log.warn("‚ùå Access denied to get all credentials for user: {}", JwtUtil.getCurrentId().orElse("unknown"));
            return ResponseEntity.status(403).build();
        }
        
        List<CompanyCredentials> credentials = credentialsService.findByMarketplace("YANDEX");
        
        // –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        credentials.forEach(cred -> {
            cred.setClientSecret("***");
            cred.setAccessToken("***");
            cred.setRefreshToken("***");
        });
        
        return ResponseEntity.ok(credentials);
    }
    

}
