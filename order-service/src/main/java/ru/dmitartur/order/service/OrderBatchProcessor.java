package ru.dmitartur.order.service;

import com.fasterxml.jackson.databind.JsonNode;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import ru.dmitartur.order.entity.Order;
import ru.dmitartur.order.entity.OrderItem;
import ru.dmitartur.order.entity.OrderStatusHistory;
import ru.dmitartur.order.mapper.OrderMapper;
import ru.dmitartur.order.repository.OrderRepository;
import ru.dmitartur.order.repository.OrderStatusHistoryRepository;
import ru.dmitartur.common.enums.OrderStatus;
import ru.dmitartur.order.service.product.ProductService;
import ru.dmitartur.order.service.product.StockUpdateService;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Optional;

/**
 * –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (Ozon, Yandex –∏ —Ç.–¥.)
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class OrderBatchProcessor {
    
    private final OrderRepository orderRepository;
    private final OrderStatusHistoryRepository orderStatusHistoryRepository;
    private final OrderMapper orderMapper;
    private final ProductService productService;
    private final StockUpdateService stockUpdateService;

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞–∫–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Ozon API
     */
    public int processOzonBatch(JsonNode payload) {
        log.info("üîÑ Starting batch processing of orders from Ozon");
        
        if (!validatePayload(payload)) {
            return 0;
        }
        
        JsonNode result = payload.get("result");
        log.info("üìä Found {} orders in result array", result.size());
        
        int count = 0;
        for (JsonNode orderData : result) {
            try {
                if (processOrder(orderData)) {
                    count++;
                }
            } catch (Exception e) {
                log.error("‚ùå Error processing order: {}", e.getMessage(), e);
            }
        }
        
        log.info("‚úÖ Batch processing completed: {} orders processed successfully", count);
        return count;
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ payload
     */
    private boolean validatePayload(JsonNode payload) {
        if (payload == null) {
            log.error("‚ùå Payload is null");
            return false;
        }
        
        log.debug("üì¶ Payload structure: {}", payload.toPrettyString());
        
        if (!payload.has("result")) {
            log.error("‚ùå Payload does not contain 'result' field. Available fields: {}", 
                     payload.fieldNames().toString());
            return false;
        }
        
        JsonNode result = payload.get("result");
        if (!result.isArray()) {
            log.error("‚ùå 'result' field is not an array. Type: {}", result.getNodeType());
            return false;
        }
        
        return true;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –∑–∞–∫–∞–∑
     */
    private boolean processOrder(JsonNode orderData) {
        String postingNumber = orderData.path("posting_number").asText();
        if (postingNumber == null || postingNumber.isEmpty()) {
            log.warn("‚ùå Skipping order with empty posting_number: {}", orderData.toPrettyString());
            return false;
        }
        
        log.debug("üîÑ Processing order: postingNumber={}", postingNumber);
        
        Order order = findOrCreateOrder(orderData, postingNumber);
        updateOrderStatus(order, orderData, postingNumber);
        updateOrderDates(order, orderData, postingNumber);
        updateOrderItems(order, orderData, postingNumber);
        
        orderRepository.save(order);
        log.debug("‚úÖ Successfully processed order: postingNumber={}", postingNumber);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —á–µ—Ä–µ–∑ Kafka —Å–æ–±—ã—Ç–∏—è
        stockUpdateService.updateStockForOrder(order);
        
        return true;
    }

    /**
     * –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
     */
    private Order findOrCreateOrder(JsonNode orderData, String postingNumber) {
        return orderRepository.findByPostingNumber(postingNumber)
                .orElseGet(() -> {
                    log.info("üÜï Creating new order: postingNumber={}", postingNumber);
                    String status = orderData.path("status").asText("unknown");
                    String created = orderData.path("created_at").asText(null);
                    OffsetDateTime createdAt = parseDateTime(created);
                    return orderMapper.toEntity(postingNumber, status, createdAt);
                });
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    private void updateOrderStatus(Order order, JsonNode orderData, String postingNumber) {
        String newStatusStr = orderData.path("status").asText("unknown");
        OrderStatus newStatus = OrderStatus.fromCode(newStatusStr);
        boolean statusChanged = !newStatus.equals(order.getStatus());
        
        if (statusChanged) {
            log.info("üîÑ Status changed for order {}: {} -> {}", postingNumber, order.getStatus(), newStatus);
            order.setStatus(newStatus);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
            OrderStatusHistory history = new OrderStatusHistory(
                order, newStatus, order.getStatus(), "OZON_API"
            );
            orderStatusHistoryRepository.save(history);
            log.info("üìù Status history saved for order {}: {} -> {}", 
                    postingNumber, order.getStatus(), newStatus);
        } else {
            order.setStatus(newStatus);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—ã –∑–∞–∫–∞–∑–∞
     */
    private void updateOrderDates(Order order, JsonNode orderData, String postingNumber) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç Ozon
        String created = orderData.path("created_at").asText(null);
        if (created != null) {
            OffsetDateTime ozonCreatedAt = parseDateTime(created);
            if (ozonCreatedAt != null) {
                order.setOzonCreatedAt(ozonCreatedAt);
                log.debug("‚úÖ Set Ozon created date for order {}: {}", postingNumber, order.getOzonCreatedAt());
            }
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à—É –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        order.setUpdatedAt(OffsetDateTime.now());
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
     */
    private void updateOrderItems(Order order, JsonNode orderData, String postingNumber) {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
        order.getItems().clear();
        
        if (!orderData.has("products")) {
            return;
        }
        
        JsonNode products = orderData.get("products");
        log.debug("üì¶ Processing {} products for order {}", products.size(), postingNumber);
        
        for (JsonNode product : products) {
            OrderItem orderItem = createOrderItem(order, product, postingNumber);
            order.getItems().add(orderItem);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º
        logUnmappedItems(order);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–∫–∞–∑–∞
     */
    private OrderItem createOrderItem(Order order, JsonNode product, String postingNumber) {
        OrderItem orderItem = new OrderItem();
        orderItem.setOrder(order);
        
        String offerId = product.path("offer_id").asText();
        String sku = product.path("sku").asText();
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –ø–æ article (offer_id)
        Long productId = findProductIdByArticle(offerId);
        
        orderItem.setProductId(productId);
        orderItem.setSku(sku);
        orderItem.setOfferId(offerId);
        orderItem.setName(product.path("name").asText(null));
        orderItem.setQuantity(product.path("quantity").asInt(1));
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É
        setOrderItemPrice(orderItem, product, postingNumber);
        
        log.debug("‚úÖ Added product: offerId={}, name={}, quantity={}, productId={}", 
                orderItem.getOfferId(), orderItem.getName(), orderItem.getQuantity(), orderItem.getProductId());
        
        return orderItem;
    }

    /**
     * –ù–∞–π—Ç–∏ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ article
     */
    private Long findProductIdByArticle(String offerId) {
        if (offerId == null || offerId.isEmpty()) {
            return null;
        }
        
        try {
            Optional<ProductService.ProductInfo> productInfo = productService.findProductByArticle(offerId);
            
            if (productInfo.isPresent()) {
                log.debug("‚úÖ Found product by article: article={}, productId={}", offerId, productInfo.get().getId());
                return productInfo.get().getId();
            } else {
                log.debug("‚ö†Ô∏è Product not found by article: article={}, will save with productId=null", offerId);
                return null;
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error searching product by article {}: {}, will save with productId=null", 
                    offerId, e.getMessage());
            return null;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∑–∞–∫–∞–∑–∞
     */
    private void setOrderItemPrice(OrderItem orderItem, JsonNode product, String postingNumber) {
        if (product.has("price")) {
            try {
                orderItem.setPrice(new BigDecimal(product.get("price").asText()));
            } catch (Exception e) {
                log.warn("‚ùå Failed to parse price for product in order {}: {}", postingNumber, e.getMessage());
            }
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º
     */
    private void logUnmappedItems(Order order) {
        for (OrderItem item : order.getItems()) {
            if (item.getOfferId() != null && item.getProductId() == null) {
                log.info("üìä Order item without product mapping: article={}, name={}, quantity={}", 
                        item.getOfferId(), item.getName(), item.getQuantity());
            }
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    private OffsetDateTime parseDateTime(String dateString) {
        if (dateString == null) {
            return null;
        }
        
        try {
            return OffsetDateTime.parse(dateString);
        } catch (Exception e) {
            log.warn("‚ùå Failed to parse date: {}", e.getMessage());
            return null;
        }
    }
}
