package ru.dmitartur.order.event;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import ru.dmitartur.common.grpc.client.ProductGrpcClient;
import ru.dmitartur.order.entity.Order;
import ru.dmitartur.order.kafka.OrderEventProducer;
import ru.dmitartur.common.events.EventType;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
 * 
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
 * - OrderCreatedEvent - —É–º–µ–Ω—å—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
 * - OrderCancelledEvent - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
 * 
 * –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ Kafka –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class OrderEventListener {
    
    private final ProductGrpcClient productGrpcClient;
    private final OrderEventProducer orderEventProducer;
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
     * –£–º–µ–Ω—å—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Kafka
     */
    @EventListener
    @Async("orderEventExecutor")
    public void handleOrderCreated(OrderCreatedEvent event) {
        Order order = event.getOrder();
        log.info("üì¶ Processing stock update for created order: postingNumber={}", order.getPostingNumber());
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Kafka
            orderEventProducer.sendOrderCreatedEvent(order);
            
            log.info("‚úÖ Stock update completed for created order: postingNumber={}", order.getPostingNumber());
            
        } catch (Exception e) {
            log.error("‚ùå Error processing stock update for created order: postingNumber={}, error={}", 
                    order.getPostingNumber(), e.getMessage());
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Kafka
     */
    @EventListener
    @Async("orderEventExecutor")
    public void handleOrderCancelled(OrderCancelledEvent event) {
        Order order = event.getOrder();
        log.info("üì¶ Processing stock update for cancelled order: postingNumber={}", order.getPostingNumber());
        
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Kafka
            orderEventProducer.sendOrderCancelledEvent(order);
            
            log.info("‚úÖ Stock update completed for cancelled order: postingNumber={}", order.getPostingNumber());
            
        } catch (Exception e) {
            log.error("‚ùå Error processing stock update for cancelled order: postingNumber={}, error={}", 
                    order.getPostingNumber(), e.getMessage());
        }
    }
}
