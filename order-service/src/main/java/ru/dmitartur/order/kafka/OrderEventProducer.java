package ru.dmitartur.order.kafka;

import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Component;
import ru.dmitartur.common.dto.OrderDto;
import ru.dmitartur.common.events.EventType;
import ru.dmitartur.common.kafka.KafkaTopics;
import ru.dmitartur.order.entity.Order;
import ru.dmitartur.order.mapper.OrderMapper;

import java.util.concurrent.CompletableFuture;

/**
 * Producer –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤ –≤ Kafka
 */
@Slf4j
@Component
@RequiredArgsConstructor
@ConditionalOnProperty(name = "kafka.enabled", havingValue = "true", matchIfMissing = false)
public class OrderEventProducer {

    @PostConstruct
    public void init() {
        log.info("üöÄ OrderEventProducer initialized and ready to send events to topic: {}", orderEventsTopic);
    }

    private final KafkaTemplate<String, Object> kafkaTemplate;
    private final OrderMapper orderMapper;

    @Value("${kafka.topics.order-events:order-events}")
    private String orderEventsTopic; // kept for config override; default ties to KafkaTopics.ORDER_EVENTS_TOPIC

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
     */
    public void sendOrderCreatedEvent(Order order) {
        sendEvent(order, EventType.ORDER_CREATED);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
     */
    public void sendOrderCancelledEvent(Order order) {
        sendEvent(order, EventType.ORDER_CANCELLED);
    }

    private void sendEvent(Order order, EventType eventType) {
        try {
            OrderDto dto = orderMapper.toDto(order);
            dto.setEventType(eventType);
            String key = order.getPostingNumber();

            log.info("üì§ Sending {} event to Kafka: postingNumber={}, items={}",
                    eventType, key, order.getItems().size());

            CompletableFuture<SendResult<String, Object>> future = kafkaTemplate.send(KafkaTopics.ORDER_EVENTS_TOPIC, key, dto);

            future.whenComplete((result, ex) -> {
                if (ex == null) {
                    log.debug("‚úÖ {} event sent successfully: postingNumber={}, partition={}, offset={}",
                            eventType, key, result.getRecordMetadata().partition(),
                            result.getRecordMetadata().offset());
                } else {
                    log.error("‚ùå Failed to send {} event: postingNumber={}, error={}",
                            eventType, key, ex.getMessage());
                    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
                }
            });

        } catch (Exception e) {
            log.error("‚ùå Error sending {} event: postingNumber={}, error={}",
                    eventType.name(), order.getPostingNumber(), e.getMessage());
        }
    }
}
